/*
 * Copyright (c) 2019, 2020, Oracle and/or its affiliates.
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License, version 2.0, as published by the
 * Free Software Foundation.
 *
 * This program is also distributed with certain software (including but not
 * limited to OpenSSL) that is licensed under separate terms, as designated in a
 * particular file or component or in included license documentation. The
 * authors of MySQL hereby grant you an additional permission to link the
 * program and your derivative works with the separately licensed software that
 * they have included with MySQL.
 *
 * Without limiting anything contained in the foregoing, this file, which is
 * part of MySQL Connector/J, is also subject to the Universal FOSS Exception,
 * version 1.0, a copy of which can be found at
 * http://oss.oracle.com/licenses/universal-foss-exception.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License, version 2.0,
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA
 */

package com.mysql.cj.x.protobuf;

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysqlx_cursor.proto

@SuppressWarnings({ "deprecation" })
public final class MysqlxCursor {
  private MysqlxCursor() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface OpenOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Mysqlx.Cursor.Open)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     ** client side assigned cursor id, the ID is going to represent
     *new cursor and assigned to it statement 
     * </pre>
     *
     * <code>required uint32 cursor_id = 1;</code>
     * @return Whether the cursorId field is set.
     */
    boolean hasCursorId();
    /**
     * <pre>
     ** client side assigned cursor id, the ID is going to represent
     *new cursor and assigned to it statement 
     * </pre>
     *
     * <code>required uint32 cursor_id = 1;</code>
     * @return The cursorId.
     */
    int getCursorId();

    /**
     * <pre>
     ** statement which resultset is going to be iterated through the cursor 
     * </pre>
     *
     * <code>required .Mysqlx.Cursor.Open.OneOfMessage stmt = 4;</code>
     * @return Whether the stmt field is set.
     */
    boolean hasStmt();
    /**
     * <pre>
     ** statement which resultset is going to be iterated through the cursor 
     * </pre>
     *
     * <code>required .Mysqlx.Cursor.Open.OneOfMessage stmt = 4;</code>
     * @return The stmt.
     */
    Open.OneOfMessage getStmt();
    /**
     * <pre>
     ** statement which resultset is going to be iterated through the cursor 
     * </pre>
     *
     * <code>required .Mysqlx.Cursor.Open.OneOfMessage stmt = 4;</code>
     */
    Open.OneOfMessageOrBuilder getStmtOrBuilder();

    /**
     * <pre>
     ** number of rows which should be retrieved from sequential cursor 
     * </pre>
     *
     * <code>optional uint64 fetch_rows = 5;</code>
     * @return Whether the fetchRows field is set.
     */
    boolean hasFetchRows();
    /**
     * <pre>
     ** number of rows which should be retrieved from sequential cursor 
     * </pre>
     *
     * <code>optional uint64 fetch_rows = 5;</code>
     * @return The fetchRows.
     */
    long getFetchRows();
  }
  /**
   * <pre>
   **
   *Open a cursor
   *&#64;startuml
   *client -&gt; server: Open
   *alt Success
   *... none or partial Resultsets or full Resultsets ...
   *client &lt;- server: StmtExecuteOk
   *else Failure
   *client &lt;- server: Error
   *end alt
   *&#64;enduml
   *&#64;returns &#64;ref Mysqlx::Ok
   * </pre>
   *
   * Protobuf type {@code Mysqlx.Cursor.Open}
   */
  public  static final class Open extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:Mysqlx.Cursor.Open)
      OpenOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Open.newBuilder() to construct.
    private Open(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Open() {
    }

    @Override
    @SuppressWarnings({"unused"})
    protected Object newInstance(
        UnusedPrivateParameter unused) {
      return new Open();
    }

    @Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Open(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              bitField0_ |= 0x00000001;
              cursorId_ = input.readUInt32();
              break;
            }
            case 34: {
              OneOfMessage.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) != 0)) {
                subBuilder = stmt_.toBuilder();
              }
              stmt_ = input.readMessage(OneOfMessage.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(stmt_);
                stmt_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 40: {
              bitField0_ |= 0x00000004;
              fetchRows_ = input.readUInt64();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return MysqlxCursor.internal_static_Mysqlx_Cursor_Open_descriptor;
    }

    @Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return MysqlxCursor.internal_static_Mysqlx_Cursor_Open_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              Open.class, Builder.class);
    }

    public interface OneOfMessageOrBuilder extends
        // @@protoc_insertion_point(interface_extends:Mysqlx.Cursor.Open.OneOfMessage)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>required .Mysqlx.Cursor.Open.OneOfMessage.Type type = 1;</code>
       * @return Whether the type field is set.
       */
      boolean hasType();
      /**
       * <code>required .Mysqlx.Cursor.Open.OneOfMessage.Type type = 1;</code>
       * @return The type.
       */
      OneOfMessage.Type getType();

      /**
       * <code>optional .Mysqlx.Prepare.Execute prepare_execute = 2;</code>
       * @return Whether the prepareExecute field is set.
       */
      boolean hasPrepareExecute();
      /**
       * <code>optional .Mysqlx.Prepare.Execute prepare_execute = 2;</code>
       * @return The prepareExecute.
       */
      MysqlxPrepare.Execute getPrepareExecute();
      /**
       * <code>optional .Mysqlx.Prepare.Execute prepare_execute = 2;</code>
       */
      MysqlxPrepare.ExecuteOrBuilder getPrepareExecuteOrBuilder();
    }
    /**
     * Protobuf type {@code Mysqlx.Cursor.Open.OneOfMessage}
     */
    public  static final class OneOfMessage extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:Mysqlx.Cursor.Open.OneOfMessage)
        OneOfMessageOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use OneOfMessage.newBuilder() to construct.
      private OneOfMessage(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private OneOfMessage() {
        type_ = 0;
      }

      @Override
      @SuppressWarnings({"unused"})
      protected Object newInstance(
          UnusedPrivateParameter unused) {
        return new OneOfMessage();
      }

      @Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private OneOfMessage(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new NullPointerException();
        }
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                int rawValue = input.readEnum();
                  @SuppressWarnings("deprecation")
                Type value = Type.valueOf(rawValue);
                if (value == null) {
                  unknownFields.mergeVarintField(1, rawValue);
                } else {
                  bitField0_ |= 0x00000001;
                  type_ = rawValue;
                }
                break;
              }
              case 18: {
                MysqlxPrepare.Execute.Builder subBuilder = null;
                if (((bitField0_ & 0x00000002) != 0)) {
                  subBuilder = prepareExecute_.toBuilder();
                }
                prepareExecute_ = input.readMessage(MysqlxPrepare.Execute.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(prepareExecute_);
                  prepareExecute_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000002;
                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return MysqlxCursor.internal_static_Mysqlx_Cursor_Open_OneOfMessage_descriptor;
      }

      @Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return MysqlxCursor.internal_static_Mysqlx_Cursor_Open_OneOfMessage_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                OneOfMessage.class, Builder.class);
      }

      /**
       * Protobuf enum {@code Mysqlx.Cursor.Open.OneOfMessage.Type}
       */
      public enum Type
          implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <code>PREPARE_EXECUTE = 0;</code>
         */
        PREPARE_EXECUTE(0),
        ;

        /**
         * <code>PREPARE_EXECUTE = 0;</code>
         */
        public static final int PREPARE_EXECUTE_VALUE = 0;


        public final int getNumber() {
          return value;
        }

        /**
         * @param value The numeric wire value of the corresponding enum entry.
         * @return The enum associated with the given numeric wire value.
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @Deprecated
        public static Type valueOf(int value) {
          return forNumber(value);
        }

        /**
         * @param value The numeric wire value of the corresponding enum entry.
         * @return The enum associated with the given numeric wire value.
         */
        public static Type forNumber(int value) {
          switch (value) {
            case 0: return PREPARE_EXECUTE;
            default: return null;
          }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<Type>
            internalGetValueMap() {
          return internalValueMap;
        }
        private static final com.google.protobuf.Internal.EnumLiteMap<
            Type> internalValueMap =
              new com.google.protobuf.Internal.EnumLiteMap<Type>() {
                public Type findValueByNumber(int number) {
                  return Type.forNumber(number);
                }
              };

        public final com.google.protobuf.Descriptors.EnumValueDescriptor
            getValueDescriptor() {
          return getDescriptor().getValues().get(ordinal());
        }
        public final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptorForType() {
          return getDescriptor();
        }
        public static final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptor() {
          return OneOfMessage.getDescriptor().getEnumTypes().get(0);
        }

        private static final Type[] VALUES = values();

        public static Type valueOf(
            com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
          if (desc.getType() != getDescriptor()) {
            throw new IllegalArgumentException(
              "EnumValueDescriptor is not for this type.");
          }
          return VALUES[desc.getIndex()];
        }

        private final int value;

        private Type(int value) {
          this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:Mysqlx.Cursor.Open.OneOfMessage.Type)
      }

      private int bitField0_;
      public static final int TYPE_FIELD_NUMBER = 1;
      private int type_;
      /**
       * <code>required .Mysqlx.Cursor.Open.OneOfMessage.Type type = 1;</code>
       * @return Whether the type field is set.
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>required .Mysqlx.Cursor.Open.OneOfMessage.Type type = 1;</code>
       * @return The type.
       */
      public Type getType() {
        @SuppressWarnings("deprecation")
        Type result = Type.valueOf(type_);
        return result == null ? Type.PREPARE_EXECUTE : result;
      }

      public static final int PREPARE_EXECUTE_FIELD_NUMBER = 2;
      private MysqlxPrepare.Execute prepareExecute_;
      /**
       * <code>optional .Mysqlx.Prepare.Execute prepare_execute = 2;</code>
       * @return Whether the prepareExecute field is set.
       */
      public boolean hasPrepareExecute() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>optional .Mysqlx.Prepare.Execute prepare_execute = 2;</code>
       * @return The prepareExecute.
       */
      public MysqlxPrepare.Execute getPrepareExecute() {
        return prepareExecute_ == null ? MysqlxPrepare.Execute.getDefaultInstance() : prepareExecute_;
      }
      /**
       * <code>optional .Mysqlx.Prepare.Execute prepare_execute = 2;</code>
       */
      public MysqlxPrepare.ExecuteOrBuilder getPrepareExecuteOrBuilder() {
        return prepareExecute_ == null ? MysqlxPrepare.Execute.getDefaultInstance() : prepareExecute_;
      }

      private byte memoizedIsInitialized = -1;
      @Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        if (!hasType()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (hasPrepareExecute()) {
          if (!getPrepareExecute().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        memoizedIsInitialized = 1;
        return true;
      }

      @Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) != 0)) {
          output.writeEnum(1, type_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          output.writeMessage(2, getPrepareExecute());
        }
        unknownFields.writeTo(output);
      }

      @Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(1, type_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, getPrepareExecute());
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @Override
      public boolean equals(final Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof OneOfMessage)) {
          return super.equals(obj);
        }
        OneOfMessage other = (OneOfMessage) obj;

        if (hasType() != other.hasType()) return false;
        if (hasType()) {
          if (type_ != other.type_) return false;
        }
        if (hasPrepareExecute() != other.hasPrepareExecute()) return false;
        if (hasPrepareExecute()) {
          if (!getPrepareExecute()
              .equals(other.getPrepareExecute())) return false;
        }
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasType()) {
          hash = (37 * hash) + TYPE_FIELD_NUMBER;
          hash = (53 * hash) + type_;
        }
        if (hasPrepareExecute()) {
          hash = (37 * hash) + PREPARE_EXECUTE_FIELD_NUMBER;
          hash = (53 * hash) + getPrepareExecute().hashCode();
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static OneOfMessage parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static OneOfMessage parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static OneOfMessage parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static OneOfMessage parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static OneOfMessage parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static OneOfMessage parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static OneOfMessage parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static OneOfMessage parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static OneOfMessage parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static OneOfMessage parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static OneOfMessage parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static OneOfMessage parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(OneOfMessage prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code Mysqlx.Cursor.Open.OneOfMessage}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:Mysqlx.Cursor.Open.OneOfMessage)
          OneOfMessageOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return MysqlxCursor.internal_static_Mysqlx_Cursor_Open_OneOfMessage_descriptor;
        }

        @Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return MysqlxCursor.internal_static_Mysqlx_Cursor_Open_OneOfMessage_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  OneOfMessage.class, Builder.class);
        }

        // Construct using com.mysql.cj.x.protobuf.MysqlxCursor.Open.OneOfMessage.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
            getPrepareExecuteFieldBuilder();
          }
        }
        @Override
        public Builder clear() {
          super.clear();
          type_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          if (prepareExecuteBuilder_ == null) {
            prepareExecute_ = null;
          } else {
            prepareExecuteBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }

        @Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return MysqlxCursor.internal_static_Mysqlx_Cursor_Open_OneOfMessage_descriptor;
        }

        @Override
        public OneOfMessage getDefaultInstanceForType() {
          return OneOfMessage.getDefaultInstance();
        }

        @Override
        public OneOfMessage build() {
          OneOfMessage result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @Override
        public OneOfMessage buildPartial() {
          OneOfMessage result = new OneOfMessage(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) != 0)) {
            to_bitField0_ |= 0x00000001;
          }
          result.type_ = type_;
          if (((from_bitField0_ & 0x00000002) != 0)) {
            if (prepareExecuteBuilder_ == null) {
              result.prepareExecute_ = prepareExecute_;
            } else {
              result.prepareExecute_ = prepareExecuteBuilder_.build();
            }
            to_bitField0_ |= 0x00000002;
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        @Override
        public Builder clone() {
          return super.clone();
        }
        @Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            Object value) {
          return super.setField(field, value);
        }
        @Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            Object value) {
          return super.addRepeatedField(field, value);
        }
        @Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof OneOfMessage) {
            return mergeFrom((OneOfMessage)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(OneOfMessage other) {
          if (other == OneOfMessage.getDefaultInstance()) return this;
          if (other.hasType()) {
            setType(other.getType());
          }
          if (other.hasPrepareExecute()) {
            mergePrepareExecute(other.getPrepareExecute());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @Override
        public final boolean isInitialized() {
          if (!hasType()) {
            return false;
          }
          if (hasPrepareExecute()) {
            if (!getPrepareExecute().isInitialized()) {
              return false;
            }
          }
          return true;
        }

        @Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          OneOfMessage parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (OneOfMessage) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private int type_ = 0;
        /**
         * <code>required .Mysqlx.Cursor.Open.OneOfMessage.Type type = 1;</code>
         * @return Whether the type field is set.
         */
        public boolean hasType() {
          return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <code>required .Mysqlx.Cursor.Open.OneOfMessage.Type type = 1;</code>
         * @return The type.
         */
        public Type getType() {
          @SuppressWarnings("deprecation")
          Type result = Type.valueOf(type_);
          return result == null ? Type.PREPARE_EXECUTE : result;
        }
        /**
         * <code>required .Mysqlx.Cursor.Open.OneOfMessage.Type type = 1;</code>
         * @param value The type to set.
         * @return This builder for chaining.
         */
        public Builder setType(Type value) {
          if (value == null) {
            throw new NullPointerException();
          }
          bitField0_ |= 0x00000001;
          type_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <code>required .Mysqlx.Cursor.Open.OneOfMessage.Type type = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearType() {
          bitField0_ = (bitField0_ & ~0x00000001);
          type_ = 0;
          onChanged();
          return this;
        }

        private MysqlxPrepare.Execute prepareExecute_;
        private com.google.protobuf.SingleFieldBuilderV3<
            MysqlxPrepare.Execute, MysqlxPrepare.Execute.Builder, MysqlxPrepare.ExecuteOrBuilder> prepareExecuteBuilder_;
        /**
         * <code>optional .Mysqlx.Prepare.Execute prepare_execute = 2;</code>
         * @return Whether the prepareExecute field is set.
         */
        public boolean hasPrepareExecute() {
          return ((bitField0_ & 0x00000002) != 0);
        }
        /**
         * <code>optional .Mysqlx.Prepare.Execute prepare_execute = 2;</code>
         * @return The prepareExecute.
         */
        public MysqlxPrepare.Execute getPrepareExecute() {
          if (prepareExecuteBuilder_ == null) {
            return prepareExecute_ == null ? MysqlxPrepare.Execute.getDefaultInstance() : prepareExecute_;
          } else {
            return prepareExecuteBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .Mysqlx.Prepare.Execute prepare_execute = 2;</code>
         */
        public Builder setPrepareExecute(MysqlxPrepare.Execute value) {
          if (prepareExecuteBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            prepareExecute_ = value;
            onChanged();
          } else {
            prepareExecuteBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .Mysqlx.Prepare.Execute prepare_execute = 2;</code>
         */
        public Builder setPrepareExecute(
            MysqlxPrepare.Execute.Builder builderForValue) {
          if (prepareExecuteBuilder_ == null) {
            prepareExecute_ = builderForValue.build();
            onChanged();
          } else {
            prepareExecuteBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .Mysqlx.Prepare.Execute prepare_execute = 2;</code>
         */
        public Builder mergePrepareExecute(MysqlxPrepare.Execute value) {
          if (prepareExecuteBuilder_ == null) {
            if (((bitField0_ & 0x00000002) != 0) &&
                prepareExecute_ != null &&
                prepareExecute_ != MysqlxPrepare.Execute.getDefaultInstance()) {
              prepareExecute_ =
                MysqlxPrepare.Execute.newBuilder(prepareExecute_).mergeFrom(value).buildPartial();
            } else {
              prepareExecute_ = value;
            }
            onChanged();
          } else {
            prepareExecuteBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .Mysqlx.Prepare.Execute prepare_execute = 2;</code>
         */
        public Builder clearPrepareExecute() {
          if (prepareExecuteBuilder_ == null) {
            prepareExecute_ = null;
            onChanged();
          } else {
            prepareExecuteBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }
        /**
         * <code>optional .Mysqlx.Prepare.Execute prepare_execute = 2;</code>
         */
        public MysqlxPrepare.Execute.Builder getPrepareExecuteBuilder() {
          bitField0_ |= 0x00000002;
          onChanged();
          return getPrepareExecuteFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .Mysqlx.Prepare.Execute prepare_execute = 2;</code>
         */
        public MysqlxPrepare.ExecuteOrBuilder getPrepareExecuteOrBuilder() {
          if (prepareExecuteBuilder_ != null) {
            return prepareExecuteBuilder_.getMessageOrBuilder();
          } else {
            return prepareExecute_ == null ?
                MysqlxPrepare.Execute.getDefaultInstance() : prepareExecute_;
          }
        }
        /**
         * <code>optional .Mysqlx.Prepare.Execute prepare_execute = 2;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            MysqlxPrepare.Execute, MysqlxPrepare.Execute.Builder, MysqlxPrepare.ExecuteOrBuilder>
            getPrepareExecuteFieldBuilder() {
          if (prepareExecuteBuilder_ == null) {
            prepareExecuteBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                MysqlxPrepare.Execute, MysqlxPrepare.Execute.Builder, MysqlxPrepare.ExecuteOrBuilder>(
                    getPrepareExecute(),
                    getParentForChildren(),
                    isClean());
            prepareExecute_ = null;
          }
          return prepareExecuteBuilder_;
        }
        @Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:Mysqlx.Cursor.Open.OneOfMessage)
      }

      // @@protoc_insertion_point(class_scope:Mysqlx.Cursor.Open.OneOfMessage)
      private static final OneOfMessage DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new OneOfMessage();
      }

      public static OneOfMessage getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      @Deprecated public static final com.google.protobuf.Parser<OneOfMessage>
          PARSER = new com.google.protobuf.AbstractParser<OneOfMessage>() {
        @Override
        public OneOfMessage parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new OneOfMessage(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<OneOfMessage> parser() {
        return PARSER;
      }

      @Override
      public com.google.protobuf.Parser<OneOfMessage> getParserForType() {
        return PARSER;
      }

      @Override
      public OneOfMessage getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int bitField0_;
    public static final int CURSOR_ID_FIELD_NUMBER = 1;
    private int cursorId_;
    /**
     * <pre>
     ** client side assigned cursor id, the ID is going to represent
     *new cursor and assigned to it statement 
     * </pre>
     *
     * <code>required uint32 cursor_id = 1;</code>
     * @return Whether the cursorId field is set.
     */
    public boolean hasCursorId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     ** client side assigned cursor id, the ID is going to represent
     *new cursor and assigned to it statement 
     * </pre>
     *
     * <code>required uint32 cursor_id = 1;</code>
     * @return The cursorId.
     */
    public int getCursorId() {
      return cursorId_;
    }

    public static final int STMT_FIELD_NUMBER = 4;
    private OneOfMessage stmt_;
    /**
     * <pre>
     ** statement which resultset is going to be iterated through the cursor 
     * </pre>
     *
     * <code>required .Mysqlx.Cursor.Open.OneOfMessage stmt = 4;</code>
     * @return Whether the stmt field is set.
     */
    public boolean hasStmt() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     ** statement which resultset is going to be iterated through the cursor 
     * </pre>
     *
     * <code>required .Mysqlx.Cursor.Open.OneOfMessage stmt = 4;</code>
     * @return The stmt.
     */
    public OneOfMessage getStmt() {
      return stmt_ == null ? OneOfMessage.getDefaultInstance() : stmt_;
    }
    /**
     * <pre>
     ** statement which resultset is going to be iterated through the cursor 
     * </pre>
     *
     * <code>required .Mysqlx.Cursor.Open.OneOfMessage stmt = 4;</code>
     */
    public OneOfMessageOrBuilder getStmtOrBuilder() {
      return stmt_ == null ? OneOfMessage.getDefaultInstance() : stmt_;
    }

    public static final int FETCH_ROWS_FIELD_NUMBER = 5;
    private long fetchRows_;
    /**
     * <pre>
     ** number of rows which should be retrieved from sequential cursor 
     * </pre>
     *
     * <code>optional uint64 fetch_rows = 5;</code>
     * @return Whether the fetchRows field is set.
     */
    public boolean hasFetchRows() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     ** number of rows which should be retrieved from sequential cursor 
     * </pre>
     *
     * <code>optional uint64 fetch_rows = 5;</code>
     * @return The fetchRows.
     */
    public long getFetchRows() {
      return fetchRows_;
    }

    private byte memoizedIsInitialized = -1;
    @Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasCursorId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasStmt()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getStmt().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeUInt32(1, cursorId_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeMessage(4, getStmt());
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeUInt64(5, fetchRows_);
      }
      unknownFields.writeTo(output);
    }

    @Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, cursorId_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getStmt());
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(5, fetchRows_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof Open)) {
        return super.equals(obj);
      }
      Open other = (Open) obj;

      if (hasCursorId() != other.hasCursorId()) return false;
      if (hasCursorId()) {
        if (getCursorId()
            != other.getCursorId()) return false;
      }
      if (hasStmt() != other.hasStmt()) return false;
      if (hasStmt()) {
        if (!getStmt()
            .equals(other.getStmt())) return false;
      }
      if (hasFetchRows() != other.hasFetchRows()) return false;
      if (hasFetchRows()) {
        if (getFetchRows()
            != other.getFetchRows()) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasCursorId()) {
        hash = (37 * hash) + CURSOR_ID_FIELD_NUMBER;
        hash = (53 * hash) + getCursorId();
      }
      if (hasStmt()) {
        hash = (37 * hash) + STMT_FIELD_NUMBER;
        hash = (53 * hash) + getStmt().hashCode();
      }
      if (hasFetchRows()) {
        hash = (37 * hash) + FETCH_ROWS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getFetchRows());
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static Open parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Open parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Open parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Open parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Open parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Open parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Open parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static Open parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static Open parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static Open parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static Open parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static Open parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(Open prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     **
     *Open a cursor
     *&#64;startuml
     *client -&gt; server: Open
     *alt Success
     *... none or partial Resultsets or full Resultsets ...
     *client &lt;- server: StmtExecuteOk
     *else Failure
     *client &lt;- server: Error
     *end alt
     *&#64;enduml
     *&#64;returns &#64;ref Mysqlx::Ok
     * </pre>
     *
     * Protobuf type {@code Mysqlx.Cursor.Open}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Mysqlx.Cursor.Open)
        OpenOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return MysqlxCursor.internal_static_Mysqlx_Cursor_Open_descriptor;
      }

      @Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return MysqlxCursor.internal_static_Mysqlx_Cursor_Open_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                Open.class, Builder.class);
      }

      // Construct using com.mysql.cj.x.protobuf.MysqlxCursor.Open.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getStmtFieldBuilder();
        }
      }
      @Override
      public Builder clear() {
        super.clear();
        cursorId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        if (stmtBuilder_ == null) {
          stmt_ = null;
        } else {
          stmtBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        fetchRows_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      @Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return MysqlxCursor.internal_static_Mysqlx_Cursor_Open_descriptor;
      }

      @Override
      public Open getDefaultInstanceForType() {
        return Open.getDefaultInstance();
      }

      @Override
      public Open build() {
        Open result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @Override
      public Open buildPartial() {
        Open result = new Open(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.cursorId_ = cursorId_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          if (stmtBuilder_ == null) {
            result.stmt_ = stmt_;
          } else {
            result.stmt_ = stmtBuilder_.build();
          }
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.fetchRows_ = fetchRows_;
          to_bitField0_ |= 0x00000004;
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @Override
      public Builder clone() {
        return super.clone();
      }
      @Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.setField(field, value);
      }
      @Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.addRepeatedField(field, value);
      }
      @Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof Open) {
          return mergeFrom((Open)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(Open other) {
        if (other == Open.getDefaultInstance()) return this;
        if (other.hasCursorId()) {
          setCursorId(other.getCursorId());
        }
        if (other.hasStmt()) {
          mergeStmt(other.getStmt());
        }
        if (other.hasFetchRows()) {
          setFetchRows(other.getFetchRows());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @Override
      public final boolean isInitialized() {
        if (!hasCursorId()) {
          return false;
        }
        if (!hasStmt()) {
          return false;
        }
        if (!getStmt().isInitialized()) {
          return false;
        }
        return true;
      }

      @Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Open parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (Open) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int cursorId_ ;
      /**
       * <pre>
       ** client side assigned cursor id, the ID is going to represent
       *new cursor and assigned to it statement 
       * </pre>
       *
       * <code>required uint32 cursor_id = 1;</code>
       * @return Whether the cursorId field is set.
       */
      public boolean hasCursorId() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       ** client side assigned cursor id, the ID is going to represent
       *new cursor and assigned to it statement 
       * </pre>
       *
       * <code>required uint32 cursor_id = 1;</code>
       * @return The cursorId.
       */
      public int getCursorId() {
        return cursorId_;
      }
      /**
       * <pre>
       ** client side assigned cursor id, the ID is going to represent
       *new cursor and assigned to it statement 
       * </pre>
       *
       * <code>required uint32 cursor_id = 1;</code>
       * @param value The cursorId to set.
       * @return This builder for chaining.
       */
      public Builder setCursorId(int value) {
        bitField0_ |= 0x00000001;
        cursorId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       ** client side assigned cursor id, the ID is going to represent
       *new cursor and assigned to it statement 
       * </pre>
       *
       * <code>required uint32 cursor_id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearCursorId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        cursorId_ = 0;
        onChanged();
        return this;
      }

      private OneOfMessage stmt_;
      private com.google.protobuf.SingleFieldBuilderV3<
          OneOfMessage, OneOfMessage.Builder, OneOfMessageOrBuilder> stmtBuilder_;
      /**
       * <pre>
       ** statement which resultset is going to be iterated through the cursor 
       * </pre>
       *
       * <code>required .Mysqlx.Cursor.Open.OneOfMessage stmt = 4;</code>
       * @return Whether the stmt field is set.
       */
      public boolean hasStmt() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       ** statement which resultset is going to be iterated through the cursor 
       * </pre>
       *
       * <code>required .Mysqlx.Cursor.Open.OneOfMessage stmt = 4;</code>
       * @return The stmt.
       */
      public OneOfMessage getStmt() {
        if (stmtBuilder_ == null) {
          return stmt_ == null ? OneOfMessage.getDefaultInstance() : stmt_;
        } else {
          return stmtBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       ** statement which resultset is going to be iterated through the cursor 
       * </pre>
       *
       * <code>required .Mysqlx.Cursor.Open.OneOfMessage stmt = 4;</code>
       */
      public Builder setStmt(OneOfMessage value) {
        if (stmtBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          stmt_ = value;
          onChanged();
        } else {
          stmtBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <pre>
       ** statement which resultset is going to be iterated through the cursor 
       * </pre>
       *
       * <code>required .Mysqlx.Cursor.Open.OneOfMessage stmt = 4;</code>
       */
      public Builder setStmt(
          OneOfMessage.Builder builderForValue) {
        if (stmtBuilder_ == null) {
          stmt_ = builderForValue.build();
          onChanged();
        } else {
          stmtBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <pre>
       ** statement which resultset is going to be iterated through the cursor 
       * </pre>
       *
       * <code>required .Mysqlx.Cursor.Open.OneOfMessage stmt = 4;</code>
       */
      public Builder mergeStmt(OneOfMessage value) {
        if (stmtBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0) &&
              stmt_ != null &&
              stmt_ != OneOfMessage.getDefaultInstance()) {
            stmt_ =
              OneOfMessage.newBuilder(stmt_).mergeFrom(value).buildPartial();
          } else {
            stmt_ = value;
          }
          onChanged();
        } else {
          stmtBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <pre>
       ** statement which resultset is going to be iterated through the cursor 
       * </pre>
       *
       * <code>required .Mysqlx.Cursor.Open.OneOfMessage stmt = 4;</code>
       */
      public Builder clearStmt() {
        if (stmtBuilder_ == null) {
          stmt_ = null;
          onChanged();
        } else {
          stmtBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <pre>
       ** statement which resultset is going to be iterated through the cursor 
       * </pre>
       *
       * <code>required .Mysqlx.Cursor.Open.OneOfMessage stmt = 4;</code>
       */
      public OneOfMessage.Builder getStmtBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getStmtFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       ** statement which resultset is going to be iterated through the cursor 
       * </pre>
       *
       * <code>required .Mysqlx.Cursor.Open.OneOfMessage stmt = 4;</code>
       */
      public OneOfMessageOrBuilder getStmtOrBuilder() {
        if (stmtBuilder_ != null) {
          return stmtBuilder_.getMessageOrBuilder();
        } else {
          return stmt_ == null ?
              OneOfMessage.getDefaultInstance() : stmt_;
        }
      }
      /**
       * <pre>
       ** statement which resultset is going to be iterated through the cursor 
       * </pre>
       *
       * <code>required .Mysqlx.Cursor.Open.OneOfMessage stmt = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          OneOfMessage, OneOfMessage.Builder, OneOfMessageOrBuilder>
          getStmtFieldBuilder() {
        if (stmtBuilder_ == null) {
          stmtBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              OneOfMessage, OneOfMessage.Builder, OneOfMessageOrBuilder>(
                  getStmt(),
                  getParentForChildren(),
                  isClean());
          stmt_ = null;
        }
        return stmtBuilder_;
      }

      private long fetchRows_ ;
      /**
       * <pre>
       ** number of rows which should be retrieved from sequential cursor 
       * </pre>
       *
       * <code>optional uint64 fetch_rows = 5;</code>
       * @return Whether the fetchRows field is set.
       */
      public boolean hasFetchRows() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       ** number of rows which should be retrieved from sequential cursor 
       * </pre>
       *
       * <code>optional uint64 fetch_rows = 5;</code>
       * @return The fetchRows.
       */
      public long getFetchRows() {
        return fetchRows_;
      }
      /**
       * <pre>
       ** number of rows which should be retrieved from sequential cursor 
       * </pre>
       *
       * <code>optional uint64 fetch_rows = 5;</code>
       * @param value The fetchRows to set.
       * @return This builder for chaining.
       */
      public Builder setFetchRows(long value) {
        bitField0_ |= 0x00000004;
        fetchRows_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       ** number of rows which should be retrieved from sequential cursor 
       * </pre>
       *
       * <code>optional uint64 fetch_rows = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearFetchRows() {
        bitField0_ = (bitField0_ & ~0x00000004);
        fetchRows_ = 0L;
        onChanged();
        return this;
      }
      @Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:Mysqlx.Cursor.Open)
    }

    // @@protoc_insertion_point(class_scope:Mysqlx.Cursor.Open)
    private static final Open DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new Open();
    }

    public static Open getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @Deprecated public static final com.google.protobuf.Parser<Open>
        PARSER = new com.google.protobuf.AbstractParser<Open>() {
      @Override
      public Open parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Open(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Open> parser() {
      return PARSER;
    }

    @Override
    public com.google.protobuf.Parser<Open> getParserForType() {
      return PARSER;
    }

    @Override
    public Open getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface FetchOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Mysqlx.Cursor.Fetch)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     ** client side assigned cursor id, must be already open 
     * </pre>
     *
     * <code>required uint32 cursor_id = 1;</code>
     * @return Whether the cursorId field is set.
     */
    boolean hasCursorId();
    /**
     * <pre>
     ** client side assigned cursor id, must be already open 
     * </pre>
     *
     * <code>required uint32 cursor_id = 1;</code>
     * @return The cursorId.
     */
    int getCursorId();

    /**
     * <pre>
     ** number of rows which should be retrieved from sequential cursor 
     * </pre>
     *
     * <code>optional uint64 fetch_rows = 5;</code>
     * @return Whether the fetchRows field is set.
     */
    boolean hasFetchRows();
    /**
     * <pre>
     ** number of rows which should be retrieved from sequential cursor 
     * </pre>
     *
     * <code>optional uint64 fetch_rows = 5;</code>
     * @return The fetchRows.
     */
    long getFetchRows();
  }
  /**
   * <pre>
   **
   *Fetch next portion of data from a cursor
   *&#64;startuml
   *client -&gt; server: Fetch
   *alt Success
   *... none or partial Resultsets or full Resultsets ...
   *client &lt;- server: StmtExecuteOk
   *else
   *client &lt;- server: Error
   *end
   *&#64;enduml
   * </pre>
   *
   * Protobuf type {@code Mysqlx.Cursor.Fetch}
   */
  public  static final class Fetch extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:Mysqlx.Cursor.Fetch)
      FetchOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Fetch.newBuilder() to construct.
    private Fetch(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Fetch() {
    }

    @Override
    @SuppressWarnings({"unused"})
    protected Object newInstance(
        UnusedPrivateParameter unused) {
      return new Fetch();
    }

    @Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Fetch(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              bitField0_ |= 0x00000001;
              cursorId_ = input.readUInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000002;
              fetchRows_ = input.readUInt64();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return MysqlxCursor.internal_static_Mysqlx_Cursor_Fetch_descriptor;
    }

    @Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return MysqlxCursor.internal_static_Mysqlx_Cursor_Fetch_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              Fetch.class, Builder.class);
    }

    private int bitField0_;
    public static final int CURSOR_ID_FIELD_NUMBER = 1;
    private int cursorId_;
    /**
     * <pre>
     ** client side assigned cursor id, must be already open 
     * </pre>
     *
     * <code>required uint32 cursor_id = 1;</code>
     * @return Whether the cursorId field is set.
     */
    public boolean hasCursorId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     ** client side assigned cursor id, must be already open 
     * </pre>
     *
     * <code>required uint32 cursor_id = 1;</code>
     * @return The cursorId.
     */
    public int getCursorId() {
      return cursorId_;
    }

    public static final int FETCH_ROWS_FIELD_NUMBER = 5;
    private long fetchRows_;
    /**
     * <pre>
     ** number of rows which should be retrieved from sequential cursor 
     * </pre>
     *
     * <code>optional uint64 fetch_rows = 5;</code>
     * @return Whether the fetchRows field is set.
     */
    public boolean hasFetchRows() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     ** number of rows which should be retrieved from sequential cursor 
     * </pre>
     *
     * <code>optional uint64 fetch_rows = 5;</code>
     * @return The fetchRows.
     */
    public long getFetchRows() {
      return fetchRows_;
    }

    private byte memoizedIsInitialized = -1;
    @Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasCursorId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeUInt32(1, cursorId_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeUInt64(5, fetchRows_);
      }
      unknownFields.writeTo(output);
    }

    @Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, cursorId_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(5, fetchRows_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof Fetch)) {
        return super.equals(obj);
      }
      Fetch other = (Fetch) obj;

      if (hasCursorId() != other.hasCursorId()) return false;
      if (hasCursorId()) {
        if (getCursorId()
            != other.getCursorId()) return false;
      }
      if (hasFetchRows() != other.hasFetchRows()) return false;
      if (hasFetchRows()) {
        if (getFetchRows()
            != other.getFetchRows()) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasCursorId()) {
        hash = (37 * hash) + CURSOR_ID_FIELD_NUMBER;
        hash = (53 * hash) + getCursorId();
      }
      if (hasFetchRows()) {
        hash = (37 * hash) + FETCH_ROWS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getFetchRows());
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static Fetch parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Fetch parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Fetch parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Fetch parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Fetch parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Fetch parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Fetch parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static Fetch parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static Fetch parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static Fetch parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static Fetch parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static Fetch parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(Fetch prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     **
     *Fetch next portion of data from a cursor
     *&#64;startuml
     *client -&gt; server: Fetch
     *alt Success
     *... none or partial Resultsets or full Resultsets ...
     *client &lt;- server: StmtExecuteOk
     *else
     *client &lt;- server: Error
     *end
     *&#64;enduml
     * </pre>
     *
     * Protobuf type {@code Mysqlx.Cursor.Fetch}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Mysqlx.Cursor.Fetch)
        FetchOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return MysqlxCursor.internal_static_Mysqlx_Cursor_Fetch_descriptor;
      }

      @Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return MysqlxCursor.internal_static_Mysqlx_Cursor_Fetch_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                Fetch.class, Builder.class);
      }

      // Construct using com.mysql.cj.x.protobuf.MysqlxCursor.Fetch.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @Override
      public Builder clear() {
        super.clear();
        cursorId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        fetchRows_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      @Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return MysqlxCursor.internal_static_Mysqlx_Cursor_Fetch_descriptor;
      }

      @Override
      public Fetch getDefaultInstanceForType() {
        return Fetch.getDefaultInstance();
      }

      @Override
      public Fetch build() {
        Fetch result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @Override
      public Fetch buildPartial() {
        Fetch result = new Fetch(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.cursorId_ = cursorId_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.fetchRows_ = fetchRows_;
          to_bitField0_ |= 0x00000002;
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @Override
      public Builder clone() {
        return super.clone();
      }
      @Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.setField(field, value);
      }
      @Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.addRepeatedField(field, value);
      }
      @Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof Fetch) {
          return mergeFrom((Fetch)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(Fetch other) {
        if (other == Fetch.getDefaultInstance()) return this;
        if (other.hasCursorId()) {
          setCursorId(other.getCursorId());
        }
        if (other.hasFetchRows()) {
          setFetchRows(other.getFetchRows());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @Override
      public final boolean isInitialized() {
        if (!hasCursorId()) {
          return false;
        }
        return true;
      }

      @Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Fetch parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (Fetch) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int cursorId_ ;
      /**
       * <pre>
       ** client side assigned cursor id, must be already open 
       * </pre>
       *
       * <code>required uint32 cursor_id = 1;</code>
       * @return Whether the cursorId field is set.
       */
      public boolean hasCursorId() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       ** client side assigned cursor id, must be already open 
       * </pre>
       *
       * <code>required uint32 cursor_id = 1;</code>
       * @return The cursorId.
       */
      public int getCursorId() {
        return cursorId_;
      }
      /**
       * <pre>
       ** client side assigned cursor id, must be already open 
       * </pre>
       *
       * <code>required uint32 cursor_id = 1;</code>
       * @param value The cursorId to set.
       * @return This builder for chaining.
       */
      public Builder setCursorId(int value) {
        bitField0_ |= 0x00000001;
        cursorId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       ** client side assigned cursor id, must be already open 
       * </pre>
       *
       * <code>required uint32 cursor_id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearCursorId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        cursorId_ = 0;
        onChanged();
        return this;
      }

      private long fetchRows_ ;
      /**
       * <pre>
       ** number of rows which should be retrieved from sequential cursor 
       * </pre>
       *
       * <code>optional uint64 fetch_rows = 5;</code>
       * @return Whether the fetchRows field is set.
       */
      public boolean hasFetchRows() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       ** number of rows which should be retrieved from sequential cursor 
       * </pre>
       *
       * <code>optional uint64 fetch_rows = 5;</code>
       * @return The fetchRows.
       */
      public long getFetchRows() {
        return fetchRows_;
      }
      /**
       * <pre>
       ** number of rows which should be retrieved from sequential cursor 
       * </pre>
       *
       * <code>optional uint64 fetch_rows = 5;</code>
       * @param value The fetchRows to set.
       * @return This builder for chaining.
       */
      public Builder setFetchRows(long value) {
        bitField0_ |= 0x00000002;
        fetchRows_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       ** number of rows which should be retrieved from sequential cursor 
       * </pre>
       *
       * <code>optional uint64 fetch_rows = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearFetchRows() {
        bitField0_ = (bitField0_ & ~0x00000002);
        fetchRows_ = 0L;
        onChanged();
        return this;
      }
      @Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:Mysqlx.Cursor.Fetch)
    }

    // @@protoc_insertion_point(class_scope:Mysqlx.Cursor.Fetch)
    private static final Fetch DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new Fetch();
    }

    public static Fetch getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @Deprecated public static final com.google.protobuf.Parser<Fetch>
        PARSER = new com.google.protobuf.AbstractParser<Fetch>() {
      @Override
      public Fetch parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Fetch(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Fetch> parser() {
      return PARSER;
    }

    @Override
    public com.google.protobuf.Parser<Fetch> getParserForType() {
      return PARSER;
    }

    @Override
    public Fetch getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface CloseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Mysqlx.Cursor.Close)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     ** client side assigned cursor id, must be allocated/open 
     * </pre>
     *
     * <code>required uint32 cursor_id = 1;</code>
     * @return Whether the cursorId field is set.
     */
    boolean hasCursorId();
    /**
     * <pre>
     ** client side assigned cursor id, must be allocated/open 
     * </pre>
     *
     * <code>required uint32 cursor_id = 1;</code>
     * @return The cursorId.
     */
    int getCursorId();
  }
  /**
   * <pre>
   **
   *Close cursor
   *&#64;startuml
   *client -&gt; server: Close
   *alt Success
   *client &lt;- server: Ok
   *else Failure
   *client &lt;- server: Error
   *end
   *&#64;enduml
   *&#64;returns &#64;ref Mysqlx::Ok or &#64;ref Mysqlx::Error
   * </pre>
   *
   * Protobuf type {@code Mysqlx.Cursor.Close}
   */
  public  static final class Close extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:Mysqlx.Cursor.Close)
      CloseOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Close.newBuilder() to construct.
    private Close(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Close() {
    }

    @Override
    @SuppressWarnings({"unused"})
    protected Object newInstance(
        UnusedPrivateParameter unused) {
      return new Close();
    }

    @Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Close(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              bitField0_ |= 0x00000001;
              cursorId_ = input.readUInt32();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return MysqlxCursor.internal_static_Mysqlx_Cursor_Close_descriptor;
    }

    @Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return MysqlxCursor.internal_static_Mysqlx_Cursor_Close_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              Close.class, Builder.class);
    }

    private int bitField0_;
    public static final int CURSOR_ID_FIELD_NUMBER = 1;
    private int cursorId_;
    /**
     * <pre>
     ** client side assigned cursor id, must be allocated/open 
     * </pre>
     *
     * <code>required uint32 cursor_id = 1;</code>
     * @return Whether the cursorId field is set.
     */
    public boolean hasCursorId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     ** client side assigned cursor id, must be allocated/open 
     * </pre>
     *
     * <code>required uint32 cursor_id = 1;</code>
     * @return The cursorId.
     */
    public int getCursorId() {
      return cursorId_;
    }

    private byte memoizedIsInitialized = -1;
    @Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasCursorId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeUInt32(1, cursorId_);
      }
      unknownFields.writeTo(output);
    }

    @Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, cursorId_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof Close)) {
        return super.equals(obj);
      }
      Close other = (Close) obj;

      if (hasCursorId() != other.hasCursorId()) return false;
      if (hasCursorId()) {
        if (getCursorId()
            != other.getCursorId()) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasCursorId()) {
        hash = (37 * hash) + CURSOR_ID_FIELD_NUMBER;
        hash = (53 * hash) + getCursorId();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static Close parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Close parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Close parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Close parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Close parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Close parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Close parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static Close parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static Close parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static Close parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static Close parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static Close parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(Close prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     **
     *Close cursor
     *&#64;startuml
     *client -&gt; server: Close
     *alt Success
     *client &lt;- server: Ok
     *else Failure
     *client &lt;- server: Error
     *end
     *&#64;enduml
     *&#64;returns &#64;ref Mysqlx::Ok or &#64;ref Mysqlx::Error
     * </pre>
     *
     * Protobuf type {@code Mysqlx.Cursor.Close}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Mysqlx.Cursor.Close)
        CloseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return MysqlxCursor.internal_static_Mysqlx_Cursor_Close_descriptor;
      }

      @Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return MysqlxCursor.internal_static_Mysqlx_Cursor_Close_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                Close.class, Builder.class);
      }

      // Construct using com.mysql.cj.x.protobuf.MysqlxCursor.Close.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @Override
      public Builder clear() {
        super.clear();
        cursorId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      @Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return MysqlxCursor.internal_static_Mysqlx_Cursor_Close_descriptor;
      }

      @Override
      public Close getDefaultInstanceForType() {
        return Close.getDefaultInstance();
      }

      @Override
      public Close build() {
        Close result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @Override
      public Close buildPartial() {
        Close result = new Close(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.cursorId_ = cursorId_;
          to_bitField0_ |= 0x00000001;
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @Override
      public Builder clone() {
        return super.clone();
      }
      @Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.setField(field, value);
      }
      @Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.addRepeatedField(field, value);
      }
      @Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof Close) {
          return mergeFrom((Close)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(Close other) {
        if (other == Close.getDefaultInstance()) return this;
        if (other.hasCursorId()) {
          setCursorId(other.getCursorId());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @Override
      public final boolean isInitialized() {
        if (!hasCursorId()) {
          return false;
        }
        return true;
      }

      @Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Close parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (Close) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int cursorId_ ;
      /**
       * <pre>
       ** client side assigned cursor id, must be allocated/open 
       * </pre>
       *
       * <code>required uint32 cursor_id = 1;</code>
       * @return Whether the cursorId field is set.
       */
      public boolean hasCursorId() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       ** client side assigned cursor id, must be allocated/open 
       * </pre>
       *
       * <code>required uint32 cursor_id = 1;</code>
       * @return The cursorId.
       */
      public int getCursorId() {
        return cursorId_;
      }
      /**
       * <pre>
       ** client side assigned cursor id, must be allocated/open 
       * </pre>
       *
       * <code>required uint32 cursor_id = 1;</code>
       * @param value The cursorId to set.
       * @return This builder for chaining.
       */
      public Builder setCursorId(int value) {
        bitField0_ |= 0x00000001;
        cursorId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       ** client side assigned cursor id, must be allocated/open 
       * </pre>
       *
       * <code>required uint32 cursor_id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearCursorId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        cursorId_ = 0;
        onChanged();
        return this;
      }
      @Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:Mysqlx.Cursor.Close)
    }

    // @@protoc_insertion_point(class_scope:Mysqlx.Cursor.Close)
    private static final Close DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new Close();
    }

    public static Close getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @Deprecated public static final com.google.protobuf.Parser<Close>
        PARSER = new com.google.protobuf.AbstractParser<Close>() {
      @Override
      public Close parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Close(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Close> parser() {
      return PARSER;
    }

    @Override
    public com.google.protobuf.Parser<Close> getParserForType() {
      return PARSER;
    }

    @Override
    public Close getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Mysqlx_Cursor_Open_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_Mysqlx_Cursor_Open_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Mysqlx_Cursor_Open_OneOfMessage_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_Mysqlx_Cursor_Open_OneOfMessage_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Mysqlx_Cursor_Fetch_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_Mysqlx_Cursor_Fetch_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Mysqlx_Cursor_Close_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_Mysqlx_Cursor_Close_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    String[] descriptorData = {
      "\n\023mysqlx_cursor.proto\022\rMysqlx.Cursor\032\014my" +
      "sqlx.proto\032\024mysqlx_prepare.proto\"\370\001\n\004Ope" +
      "n\022\021\n\tcursor_id\030\001 \002(\r\022.\n\004stmt\030\004 \002(\0132 .Mys" +
      "qlx.Cursor.Open.OneOfMessage\022\022\n\nfetch_ro" +
      "ws\030\005 \001(\004\032\222\001\n\014OneOfMessage\0223\n\004type\030\001 \002(\0162" +
      "%.Mysqlx.Cursor.Open.OneOfMessage.Type\0220" +
      "\n\017prepare_execute\030\002 \001(\0132\027.Mysqlx.Prepare" +
      ".Execute\"\033\n\004Type\022\023\n\017PREPARE_EXECUTE\020\000:\004\210" +
      "\3520+\"4\n\005Fetch\022\021\n\tcursor_id\030\001 \002(\r\022\022\n\nfetch" +
      "_rows\030\005 \001(\004:\004\210\3520-\" \n\005Close\022\021\n\tcursor_id\030" +
      "\001 \002(\r:\004\210\3520,B\031\n\027com.mysql.cj.x.protobuf"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          Mysqlx.getDescriptor(),
          MysqlxPrepare.getDescriptor(),
        });
    internal_static_Mysqlx_Cursor_Open_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_Mysqlx_Cursor_Open_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_Mysqlx_Cursor_Open_descriptor,
        new String[] { "CursorId", "Stmt", "FetchRows", });
    internal_static_Mysqlx_Cursor_Open_OneOfMessage_descriptor =
      internal_static_Mysqlx_Cursor_Open_descriptor.getNestedTypes().get(0);
    internal_static_Mysqlx_Cursor_Open_OneOfMessage_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_Mysqlx_Cursor_Open_OneOfMessage_descriptor,
        new String[] { "Type", "PrepareExecute", });
    internal_static_Mysqlx_Cursor_Fetch_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_Mysqlx_Cursor_Fetch_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_Mysqlx_Cursor_Fetch_descriptor,
        new String[] { "CursorId", "FetchRows", });
    internal_static_Mysqlx_Cursor_Close_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_Mysqlx_Cursor_Close_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_Mysqlx_Cursor_Close_descriptor,
        new String[] { "CursorId", });
    com.google.protobuf.ExtensionRegistry registry =
        com.google.protobuf.ExtensionRegistry.newInstance();
    registry.add(Mysqlx.clientMessageId);
    com.google.protobuf.Descriptors.FileDescriptor
        .internalUpdateFileDescriptor(descriptor, registry);
    Mysqlx.getDescriptor();
    MysqlxPrepare.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
