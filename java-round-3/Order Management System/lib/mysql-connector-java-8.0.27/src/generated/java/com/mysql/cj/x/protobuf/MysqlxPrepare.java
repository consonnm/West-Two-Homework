/*
 * Copyright (c) 2019, 2020, Oracle and/or its affiliates.
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License, version 2.0, as published by the
 * Free Software Foundation.
 *
 * This program is also distributed with certain software (including but not
 * limited to OpenSSL) that is licensed under separate terms, as designated in a
 * particular file or component or in included license documentation. The
 * authors of MySQL hereby grant you an additional permission to link the
 * program and your derivative works with the separately licensed software that
 * they have included with MySQL.
 *
 * Without limiting anything contained in the foregoing, this file, which is
 * part of MySQL Connector/J, is also subject to the Universal FOSS Exception,
 * version 1.0, a copy of which can be found at
 * http://oss.oracle.com/licenses/universal-foss-exception.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License, version 2.0,
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA
 */

package com.mysql.cj.x.protobuf;

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysqlx_prepare.proto

@SuppressWarnings({ "deprecation" })
public final class MysqlxPrepare {
  private MysqlxPrepare() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface PrepareOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Mysqlx.Prepare.Prepare)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     ** client side assigned statement id, which is going to identify
     *the result of preparation 
     * </pre>
     *
     * <code>required uint32 stmt_id = 1;</code>
     * @return Whether the stmtId field is set.
     */
    boolean hasStmtId();
    /**
     * <pre>
     ** client side assigned statement id, which is going to identify
     *the result of preparation 
     * </pre>
     *
     * <code>required uint32 stmt_id = 1;</code>
     * @return The stmtId.
     */
    int getStmtId();

    /**
     * <pre>
     ** defines one of following messages to be prepared:
     *Crud::Find, Crud::Insert, Crud::Delete, Crud::Upsert, Sql::StmtExecute 
     * </pre>
     *
     * <code>required .Mysqlx.Prepare.Prepare.OneOfMessage stmt = 2;</code>
     * @return Whether the stmt field is set.
     */
    boolean hasStmt();
    /**
     * <pre>
     ** defines one of following messages to be prepared:
     *Crud::Find, Crud::Insert, Crud::Delete, Crud::Upsert, Sql::StmtExecute 
     * </pre>
     *
     * <code>required .Mysqlx.Prepare.Prepare.OneOfMessage stmt = 2;</code>
     * @return The stmt.
     */
    Prepare.OneOfMessage getStmt();
    /**
     * <pre>
     ** defines one of following messages to be prepared:
     *Crud::Find, Crud::Insert, Crud::Delete, Crud::Upsert, Sql::StmtExecute 
     * </pre>
     *
     * <code>required .Mysqlx.Prepare.Prepare.OneOfMessage stmt = 2;</code>
     */
    Prepare.OneOfMessageOrBuilder getStmtOrBuilder();
  }
  /**
   * <pre>
   **
   *Prepare a new statement
   *&#64;startuml
   *client -&gt; server: Prepare
   *alt Success
   *client &lt;- server: Ok
   *else Failure
   *client &lt;- server: Error
   *end
   *&#64;enduml
   *&#64;returns &#64;ref Mysqlx::Ok or &#64;ref Mysqlx::Error
   * </pre>
   *
   * Protobuf type {@code Mysqlx.Prepare.Prepare}
   */
  public  static final class Prepare extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:Mysqlx.Prepare.Prepare)
      PrepareOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Prepare.newBuilder() to construct.
    private Prepare(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Prepare() {
    }

    @Override
    @SuppressWarnings({"unused"})
    protected Object newInstance(
        UnusedPrivateParameter unused) {
      return new Prepare();
    }

    @Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Prepare(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              bitField0_ |= 0x00000001;
              stmtId_ = input.readUInt32();
              break;
            }
            case 18: {
              OneOfMessage.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) != 0)) {
                subBuilder = stmt_.toBuilder();
              }
              stmt_ = input.readMessage(OneOfMessage.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(stmt_);
                stmt_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return MysqlxPrepare.internal_static_Mysqlx_Prepare_Prepare_descriptor;
    }

    @Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return MysqlxPrepare.internal_static_Mysqlx_Prepare_Prepare_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              Prepare.class, Builder.class);
    }

    public interface OneOfMessageOrBuilder extends
        // @@protoc_insertion_point(interface_extends:Mysqlx.Prepare.Prepare.OneOfMessage)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>required .Mysqlx.Prepare.Prepare.OneOfMessage.Type type = 1;</code>
       * @return Whether the type field is set.
       */
      boolean hasType();
      /**
       * <code>required .Mysqlx.Prepare.Prepare.OneOfMessage.Type type = 1;</code>
       * @return The type.
       */
      OneOfMessage.Type getType();

      /**
       * <code>optional .Mysqlx.Crud.Find find = 2;</code>
       * @return Whether the find field is set.
       */
      boolean hasFind();
      /**
       * <code>optional .Mysqlx.Crud.Find find = 2;</code>
       * @return The find.
       */
      MysqlxCrud.Find getFind();
      /**
       * <code>optional .Mysqlx.Crud.Find find = 2;</code>
       */
      MysqlxCrud.FindOrBuilder getFindOrBuilder();

      /**
       * <code>optional .Mysqlx.Crud.Insert insert = 3;</code>
       * @return Whether the insert field is set.
       */
      boolean hasInsert();
      /**
       * <code>optional .Mysqlx.Crud.Insert insert = 3;</code>
       * @return The insert.
       */
      MysqlxCrud.Insert getInsert();
      /**
       * <code>optional .Mysqlx.Crud.Insert insert = 3;</code>
       */
      MysqlxCrud.InsertOrBuilder getInsertOrBuilder();

      /**
       * <code>optional .Mysqlx.Crud.Update update = 4;</code>
       * @return Whether the update field is set.
       */
      boolean hasUpdate();
      /**
       * <code>optional .Mysqlx.Crud.Update update = 4;</code>
       * @return The update.
       */
      MysqlxCrud.Update getUpdate();
      /**
       * <code>optional .Mysqlx.Crud.Update update = 4;</code>
       */
      MysqlxCrud.UpdateOrBuilder getUpdateOrBuilder();

      /**
       * <code>optional .Mysqlx.Crud.Delete delete = 5;</code>
       * @return Whether the delete field is set.
       */
      boolean hasDelete();
      /**
       * <code>optional .Mysqlx.Crud.Delete delete = 5;</code>
       * @return The delete.
       */
      MysqlxCrud.Delete getDelete();
      /**
       * <code>optional .Mysqlx.Crud.Delete delete = 5;</code>
       */
      MysqlxCrud.DeleteOrBuilder getDeleteOrBuilder();

      /**
       * <code>optional .Mysqlx.Sql.StmtExecute stmt_execute = 6;</code>
       * @return Whether the stmtExecute field is set.
       */
      boolean hasStmtExecute();
      /**
       * <code>optional .Mysqlx.Sql.StmtExecute stmt_execute = 6;</code>
       * @return The stmtExecute.
       */
      MysqlxSql.StmtExecute getStmtExecute();
      /**
       * <code>optional .Mysqlx.Sql.StmtExecute stmt_execute = 6;</code>
       */
      MysqlxSql.StmtExecuteOrBuilder getStmtExecuteOrBuilder();
    }
    /**
     * Protobuf type {@code Mysqlx.Prepare.Prepare.OneOfMessage}
     */
    public  static final class OneOfMessage extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:Mysqlx.Prepare.Prepare.OneOfMessage)
        OneOfMessageOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use OneOfMessage.newBuilder() to construct.
      private OneOfMessage(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private OneOfMessage() {
        type_ = 0;
      }

      @Override
      @SuppressWarnings({"unused"})
      protected Object newInstance(
          UnusedPrivateParameter unused) {
        return new OneOfMessage();
      }

      @Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private OneOfMessage(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new NullPointerException();
        }
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                int rawValue = input.readEnum();
                  @SuppressWarnings("deprecation")
                Type value = Type.valueOf(rawValue);
                if (value == null) {
                  unknownFields.mergeVarintField(1, rawValue);
                } else {
                  bitField0_ |= 0x00000001;
                  type_ = rawValue;
                }
                break;
              }
              case 18: {
                MysqlxCrud.Find.Builder subBuilder = null;
                if (((bitField0_ & 0x00000002) != 0)) {
                  subBuilder = find_.toBuilder();
                }
                find_ = input.readMessage(MysqlxCrud.Find.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(find_);
                  find_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000002;
                break;
              }
              case 26: {
                MysqlxCrud.Insert.Builder subBuilder = null;
                if (((bitField0_ & 0x00000004) != 0)) {
                  subBuilder = insert_.toBuilder();
                }
                insert_ = input.readMessage(MysqlxCrud.Insert.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(insert_);
                  insert_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000004;
                break;
              }
              case 34: {
                MysqlxCrud.Update.Builder subBuilder = null;
                if (((bitField0_ & 0x00000008) != 0)) {
                  subBuilder = update_.toBuilder();
                }
                update_ = input.readMessage(MysqlxCrud.Update.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(update_);
                  update_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000008;
                break;
              }
              case 42: {
                MysqlxCrud.Delete.Builder subBuilder = null;
                if (((bitField0_ & 0x00000010) != 0)) {
                  subBuilder = delete_.toBuilder();
                }
                delete_ = input.readMessage(MysqlxCrud.Delete.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(delete_);
                  delete_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000010;
                break;
              }
              case 50: {
                MysqlxSql.StmtExecute.Builder subBuilder = null;
                if (((bitField0_ & 0x00000020) != 0)) {
                  subBuilder = stmtExecute_.toBuilder();
                }
                stmtExecute_ = input.readMessage(MysqlxSql.StmtExecute.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(stmtExecute_);
                  stmtExecute_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000020;
                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return MysqlxPrepare.internal_static_Mysqlx_Prepare_Prepare_OneOfMessage_descriptor;
      }

      @Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return MysqlxPrepare.internal_static_Mysqlx_Prepare_Prepare_OneOfMessage_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                OneOfMessage.class, Builder.class);
      }

      /**
       * <pre>
       * Determine which of optional fields was set by the client
       * (Workaround for missing "oneof" keyword in pb2.5)
       * </pre>
       *
       * Protobuf enum {@code Mysqlx.Prepare.Prepare.OneOfMessage.Type}
       */
      public enum Type
          implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <code>FIND = 0;</code>
         */
        FIND(0),
        /**
         * <code>INSERT = 1;</code>
         */
        INSERT(1),
        /**
         * <code>UPDATE = 2;</code>
         */
        UPDATE(2),
        /**
         * <code>DELETE = 4;</code>
         */
        DELETE(4),
        /**
         * <code>STMT = 5;</code>
         */
        STMT(5),
        ;

        /**
         * <code>FIND = 0;</code>
         */
        public static final int FIND_VALUE = 0;
        /**
         * <code>INSERT = 1;</code>
         */
        public static final int INSERT_VALUE = 1;
        /**
         * <code>UPDATE = 2;</code>
         */
        public static final int UPDATE_VALUE = 2;
        /**
         * <code>DELETE = 4;</code>
         */
        public static final int DELETE_VALUE = 4;
        /**
         * <code>STMT = 5;</code>
         */
        public static final int STMT_VALUE = 5;


        public final int getNumber() {
          return value;
        }

        /**
         * @param value The numeric wire value of the corresponding enum entry.
         * @return The enum associated with the given numeric wire value.
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @Deprecated
        public static Type valueOf(int value) {
          return forNumber(value);
        }

        /**
         * @param value The numeric wire value of the corresponding enum entry.
         * @return The enum associated with the given numeric wire value.
         */
        public static Type forNumber(int value) {
          switch (value) {
            case 0: return FIND;
            case 1: return INSERT;
            case 2: return UPDATE;
            case 4: return DELETE;
            case 5: return STMT;
            default: return null;
          }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<Type>
            internalGetValueMap() {
          return internalValueMap;
        }
        private static final com.google.protobuf.Internal.EnumLiteMap<
            Type> internalValueMap =
              new com.google.protobuf.Internal.EnumLiteMap<Type>() {
                public Type findValueByNumber(int number) {
                  return Type.forNumber(number);
                }
              };

        public final com.google.protobuf.Descriptors.EnumValueDescriptor
            getValueDescriptor() {
          return getDescriptor().getValues().get(ordinal());
        }
        public final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptorForType() {
          return getDescriptor();
        }
        public static final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptor() {
          return OneOfMessage.getDescriptor().getEnumTypes().get(0);
        }

        private static final Type[] VALUES = values();

        public static Type valueOf(
            com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
          if (desc.getType() != getDescriptor()) {
            throw new IllegalArgumentException(
              "EnumValueDescriptor is not for this type.");
          }
          return VALUES[desc.getIndex()];
        }

        private final int value;

        private Type(int value) {
          this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:Mysqlx.Prepare.Prepare.OneOfMessage.Type)
      }

      private int bitField0_;
      public static final int TYPE_FIELD_NUMBER = 1;
      private int type_;
      /**
       * <code>required .Mysqlx.Prepare.Prepare.OneOfMessage.Type type = 1;</code>
       * @return Whether the type field is set.
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>required .Mysqlx.Prepare.Prepare.OneOfMessage.Type type = 1;</code>
       * @return The type.
       */
      public Type getType() {
        @SuppressWarnings("deprecation")
        Type result = Type.valueOf(type_);
        return result == null ? Type.FIND : result;
      }

      public static final int FIND_FIELD_NUMBER = 2;
      private MysqlxCrud.Find find_;
      /**
       * <code>optional .Mysqlx.Crud.Find find = 2;</code>
       * @return Whether the find field is set.
       */
      public boolean hasFind() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>optional .Mysqlx.Crud.Find find = 2;</code>
       * @return The find.
       */
      public MysqlxCrud.Find getFind() {
        return find_ == null ? MysqlxCrud.Find.getDefaultInstance() : find_;
      }
      /**
       * <code>optional .Mysqlx.Crud.Find find = 2;</code>
       */
      public MysqlxCrud.FindOrBuilder getFindOrBuilder() {
        return find_ == null ? MysqlxCrud.Find.getDefaultInstance() : find_;
      }

      public static final int INSERT_FIELD_NUMBER = 3;
      private MysqlxCrud.Insert insert_;
      /**
       * <code>optional .Mysqlx.Crud.Insert insert = 3;</code>
       * @return Whether the insert field is set.
       */
      public boolean hasInsert() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>optional .Mysqlx.Crud.Insert insert = 3;</code>
       * @return The insert.
       */
      public MysqlxCrud.Insert getInsert() {
        return insert_ == null ? MysqlxCrud.Insert.getDefaultInstance() : insert_;
      }
      /**
       * <code>optional .Mysqlx.Crud.Insert insert = 3;</code>
       */
      public MysqlxCrud.InsertOrBuilder getInsertOrBuilder() {
        return insert_ == null ? MysqlxCrud.Insert.getDefaultInstance() : insert_;
      }

      public static final int UPDATE_FIELD_NUMBER = 4;
      private MysqlxCrud.Update update_;
      /**
       * <code>optional .Mysqlx.Crud.Update update = 4;</code>
       * @return Whether the update field is set.
       */
      public boolean hasUpdate() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <code>optional .Mysqlx.Crud.Update update = 4;</code>
       * @return The update.
       */
      public MysqlxCrud.Update getUpdate() {
        return update_ == null ? MysqlxCrud.Update.getDefaultInstance() : update_;
      }
      /**
       * <code>optional .Mysqlx.Crud.Update update = 4;</code>
       */
      public MysqlxCrud.UpdateOrBuilder getUpdateOrBuilder() {
        return update_ == null ? MysqlxCrud.Update.getDefaultInstance() : update_;
      }

      public static final int DELETE_FIELD_NUMBER = 5;
      private MysqlxCrud.Delete delete_;
      /**
       * <code>optional .Mysqlx.Crud.Delete delete = 5;</code>
       * @return Whether the delete field is set.
       */
      public boolean hasDelete() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <code>optional .Mysqlx.Crud.Delete delete = 5;</code>
       * @return The delete.
       */
      public MysqlxCrud.Delete getDelete() {
        return delete_ == null ? MysqlxCrud.Delete.getDefaultInstance() : delete_;
      }
      /**
       * <code>optional .Mysqlx.Crud.Delete delete = 5;</code>
       */
      public MysqlxCrud.DeleteOrBuilder getDeleteOrBuilder() {
        return delete_ == null ? MysqlxCrud.Delete.getDefaultInstance() : delete_;
      }

      public static final int STMT_EXECUTE_FIELD_NUMBER = 6;
      private MysqlxSql.StmtExecute stmtExecute_;
      /**
       * <code>optional .Mysqlx.Sql.StmtExecute stmt_execute = 6;</code>
       * @return Whether the stmtExecute field is set.
       */
      public boolean hasStmtExecute() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <code>optional .Mysqlx.Sql.StmtExecute stmt_execute = 6;</code>
       * @return The stmtExecute.
       */
      public MysqlxSql.StmtExecute getStmtExecute() {
        return stmtExecute_ == null ? MysqlxSql.StmtExecute.getDefaultInstance() : stmtExecute_;
      }
      /**
       * <code>optional .Mysqlx.Sql.StmtExecute stmt_execute = 6;</code>
       */
      public MysqlxSql.StmtExecuteOrBuilder getStmtExecuteOrBuilder() {
        return stmtExecute_ == null ? MysqlxSql.StmtExecute.getDefaultInstance() : stmtExecute_;
      }

      private byte memoizedIsInitialized = -1;
      @Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        if (!hasType()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (hasFind()) {
          if (!getFind().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        if (hasInsert()) {
          if (!getInsert().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        if (hasUpdate()) {
          if (!getUpdate().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        if (hasDelete()) {
          if (!getDelete().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        if (hasStmtExecute()) {
          if (!getStmtExecute().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        memoizedIsInitialized = 1;
        return true;
      }

      @Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) != 0)) {
          output.writeEnum(1, type_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          output.writeMessage(2, getFind());
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          output.writeMessage(3, getInsert());
        }
        if (((bitField0_ & 0x00000008) != 0)) {
          output.writeMessage(4, getUpdate());
        }
        if (((bitField0_ & 0x00000010) != 0)) {
          output.writeMessage(5, getDelete());
        }
        if (((bitField0_ & 0x00000020) != 0)) {
          output.writeMessage(6, getStmtExecute());
        }
        unknownFields.writeTo(output);
      }

      @Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(1, type_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, getFind());
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(3, getInsert());
        }
        if (((bitField0_ & 0x00000008) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(4, getUpdate());
        }
        if (((bitField0_ & 0x00000010) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(5, getDelete());
        }
        if (((bitField0_ & 0x00000020) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(6, getStmtExecute());
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @Override
      public boolean equals(final Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof OneOfMessage)) {
          return super.equals(obj);
        }
        OneOfMessage other = (OneOfMessage) obj;

        if (hasType() != other.hasType()) return false;
        if (hasType()) {
          if (type_ != other.type_) return false;
        }
        if (hasFind() != other.hasFind()) return false;
        if (hasFind()) {
          if (!getFind()
              .equals(other.getFind())) return false;
        }
        if (hasInsert() != other.hasInsert()) return false;
        if (hasInsert()) {
          if (!getInsert()
              .equals(other.getInsert())) return false;
        }
        if (hasUpdate() != other.hasUpdate()) return false;
        if (hasUpdate()) {
          if (!getUpdate()
              .equals(other.getUpdate())) return false;
        }
        if (hasDelete() != other.hasDelete()) return false;
        if (hasDelete()) {
          if (!getDelete()
              .equals(other.getDelete())) return false;
        }
        if (hasStmtExecute() != other.hasStmtExecute()) return false;
        if (hasStmtExecute()) {
          if (!getStmtExecute()
              .equals(other.getStmtExecute())) return false;
        }
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasType()) {
          hash = (37 * hash) + TYPE_FIELD_NUMBER;
          hash = (53 * hash) + type_;
        }
        if (hasFind()) {
          hash = (37 * hash) + FIND_FIELD_NUMBER;
          hash = (53 * hash) + getFind().hashCode();
        }
        if (hasInsert()) {
          hash = (37 * hash) + INSERT_FIELD_NUMBER;
          hash = (53 * hash) + getInsert().hashCode();
        }
        if (hasUpdate()) {
          hash = (37 * hash) + UPDATE_FIELD_NUMBER;
          hash = (53 * hash) + getUpdate().hashCode();
        }
        if (hasDelete()) {
          hash = (37 * hash) + DELETE_FIELD_NUMBER;
          hash = (53 * hash) + getDelete().hashCode();
        }
        if (hasStmtExecute()) {
          hash = (37 * hash) + STMT_EXECUTE_FIELD_NUMBER;
          hash = (53 * hash) + getStmtExecute().hashCode();
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static OneOfMessage parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static OneOfMessage parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static OneOfMessage parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static OneOfMessage parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static OneOfMessage parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static OneOfMessage parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static OneOfMessage parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static OneOfMessage parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static OneOfMessage parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static OneOfMessage parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static OneOfMessage parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static OneOfMessage parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(OneOfMessage prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code Mysqlx.Prepare.Prepare.OneOfMessage}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:Mysqlx.Prepare.Prepare.OneOfMessage)
          OneOfMessageOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return MysqlxPrepare.internal_static_Mysqlx_Prepare_Prepare_OneOfMessage_descriptor;
        }

        @Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return MysqlxPrepare.internal_static_Mysqlx_Prepare_Prepare_OneOfMessage_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  OneOfMessage.class, Builder.class);
        }

        // Construct using com.mysql.cj.x.protobuf.MysqlxPrepare.Prepare.OneOfMessage.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
            getFindFieldBuilder();
            getInsertFieldBuilder();
            getUpdateFieldBuilder();
            getDeleteFieldBuilder();
            getStmtExecuteFieldBuilder();
          }
        }
        @Override
        public Builder clear() {
          super.clear();
          type_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          if (findBuilder_ == null) {
            find_ = null;
          } else {
            findBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000002);
          if (insertBuilder_ == null) {
            insert_ = null;
          } else {
            insertBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000004);
          if (updateBuilder_ == null) {
            update_ = null;
          } else {
            updateBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000008);
          if (deleteBuilder_ == null) {
            delete_ = null;
          } else {
            deleteBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000010);
          if (stmtExecuteBuilder_ == null) {
            stmtExecute_ = null;
          } else {
            stmtExecuteBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000020);
          return this;
        }

        @Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return MysqlxPrepare.internal_static_Mysqlx_Prepare_Prepare_OneOfMessage_descriptor;
        }

        @Override
        public OneOfMessage getDefaultInstanceForType() {
          return OneOfMessage.getDefaultInstance();
        }

        @Override
        public OneOfMessage build() {
          OneOfMessage result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @Override
        public OneOfMessage buildPartial() {
          OneOfMessage result = new OneOfMessage(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) != 0)) {
            to_bitField0_ |= 0x00000001;
          }
          result.type_ = type_;
          if (((from_bitField0_ & 0x00000002) != 0)) {
            if (findBuilder_ == null) {
              result.find_ = find_;
            } else {
              result.find_ = findBuilder_.build();
            }
            to_bitField0_ |= 0x00000002;
          }
          if (((from_bitField0_ & 0x00000004) != 0)) {
            if (insertBuilder_ == null) {
              result.insert_ = insert_;
            } else {
              result.insert_ = insertBuilder_.build();
            }
            to_bitField0_ |= 0x00000004;
          }
          if (((from_bitField0_ & 0x00000008) != 0)) {
            if (updateBuilder_ == null) {
              result.update_ = update_;
            } else {
              result.update_ = updateBuilder_.build();
            }
            to_bitField0_ |= 0x00000008;
          }
          if (((from_bitField0_ & 0x00000010) != 0)) {
            if (deleteBuilder_ == null) {
              result.delete_ = delete_;
            } else {
              result.delete_ = deleteBuilder_.build();
            }
            to_bitField0_ |= 0x00000010;
          }
          if (((from_bitField0_ & 0x00000020) != 0)) {
            if (stmtExecuteBuilder_ == null) {
              result.stmtExecute_ = stmtExecute_;
            } else {
              result.stmtExecute_ = stmtExecuteBuilder_.build();
            }
            to_bitField0_ |= 0x00000020;
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        @Override
        public Builder clone() {
          return super.clone();
        }
        @Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            Object value) {
          return super.setField(field, value);
        }
        @Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            Object value) {
          return super.addRepeatedField(field, value);
        }
        @Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof OneOfMessage) {
            return mergeFrom((OneOfMessage)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(OneOfMessage other) {
          if (other == OneOfMessage.getDefaultInstance()) return this;
          if (other.hasType()) {
            setType(other.getType());
          }
          if (other.hasFind()) {
            mergeFind(other.getFind());
          }
          if (other.hasInsert()) {
            mergeInsert(other.getInsert());
          }
          if (other.hasUpdate()) {
            mergeUpdate(other.getUpdate());
          }
          if (other.hasDelete()) {
            mergeDelete(other.getDelete());
          }
          if (other.hasStmtExecute()) {
            mergeStmtExecute(other.getStmtExecute());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @Override
        public final boolean isInitialized() {
          if (!hasType()) {
            return false;
          }
          if (hasFind()) {
            if (!getFind().isInitialized()) {
              return false;
            }
          }
          if (hasInsert()) {
            if (!getInsert().isInitialized()) {
              return false;
            }
          }
          if (hasUpdate()) {
            if (!getUpdate().isInitialized()) {
              return false;
            }
          }
          if (hasDelete()) {
            if (!getDelete().isInitialized()) {
              return false;
            }
          }
          if (hasStmtExecute()) {
            if (!getStmtExecute().isInitialized()) {
              return false;
            }
          }
          return true;
        }

        @Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          OneOfMessage parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (OneOfMessage) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private int type_ = 0;
        /**
         * <code>required .Mysqlx.Prepare.Prepare.OneOfMessage.Type type = 1;</code>
         * @return Whether the type field is set.
         */
        public boolean hasType() {
          return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <code>required .Mysqlx.Prepare.Prepare.OneOfMessage.Type type = 1;</code>
         * @return The type.
         */
        public Type getType() {
          @SuppressWarnings("deprecation")
          Type result = Type.valueOf(type_);
          return result == null ? Type.FIND : result;
        }
        /**
         * <code>required .Mysqlx.Prepare.Prepare.OneOfMessage.Type type = 1;</code>
         * @param value The type to set.
         * @return This builder for chaining.
         */
        public Builder setType(Type value) {
          if (value == null) {
            throw new NullPointerException();
          }
          bitField0_ |= 0x00000001;
          type_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <code>required .Mysqlx.Prepare.Prepare.OneOfMessage.Type type = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearType() {
          bitField0_ = (bitField0_ & ~0x00000001);
          type_ = 0;
          onChanged();
          return this;
        }

        private MysqlxCrud.Find find_;
        private com.google.protobuf.SingleFieldBuilderV3<
            MysqlxCrud.Find, MysqlxCrud.Find.Builder, MysqlxCrud.FindOrBuilder> findBuilder_;
        /**
         * <code>optional .Mysqlx.Crud.Find find = 2;</code>
         * @return Whether the find field is set.
         */
        public boolean hasFind() {
          return ((bitField0_ & 0x00000002) != 0);
        }
        /**
         * <code>optional .Mysqlx.Crud.Find find = 2;</code>
         * @return The find.
         */
        public MysqlxCrud.Find getFind() {
          if (findBuilder_ == null) {
            return find_ == null ? MysqlxCrud.Find.getDefaultInstance() : find_;
          } else {
            return findBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .Mysqlx.Crud.Find find = 2;</code>
         */
        public Builder setFind(MysqlxCrud.Find value) {
          if (findBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            find_ = value;
            onChanged();
          } else {
            findBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .Mysqlx.Crud.Find find = 2;</code>
         */
        public Builder setFind(
            MysqlxCrud.Find.Builder builderForValue) {
          if (findBuilder_ == null) {
            find_ = builderForValue.build();
            onChanged();
          } else {
            findBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .Mysqlx.Crud.Find find = 2;</code>
         */
        public Builder mergeFind(MysqlxCrud.Find value) {
          if (findBuilder_ == null) {
            if (((bitField0_ & 0x00000002) != 0) &&
                find_ != null &&
                find_ != MysqlxCrud.Find.getDefaultInstance()) {
              find_ =
                MysqlxCrud.Find.newBuilder(find_).mergeFrom(value).buildPartial();
            } else {
              find_ = value;
            }
            onChanged();
          } else {
            findBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .Mysqlx.Crud.Find find = 2;</code>
         */
        public Builder clearFind() {
          if (findBuilder_ == null) {
            find_ = null;
            onChanged();
          } else {
            findBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }
        /**
         * <code>optional .Mysqlx.Crud.Find find = 2;</code>
         */
        public MysqlxCrud.Find.Builder getFindBuilder() {
          bitField0_ |= 0x00000002;
          onChanged();
          return getFindFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .Mysqlx.Crud.Find find = 2;</code>
         */
        public MysqlxCrud.FindOrBuilder getFindOrBuilder() {
          if (findBuilder_ != null) {
            return findBuilder_.getMessageOrBuilder();
          } else {
            return find_ == null ?
                MysqlxCrud.Find.getDefaultInstance() : find_;
          }
        }
        /**
         * <code>optional .Mysqlx.Crud.Find find = 2;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            MysqlxCrud.Find, MysqlxCrud.Find.Builder, MysqlxCrud.FindOrBuilder>
            getFindFieldBuilder() {
          if (findBuilder_ == null) {
            findBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                MysqlxCrud.Find, MysqlxCrud.Find.Builder, MysqlxCrud.FindOrBuilder>(
                    getFind(),
                    getParentForChildren(),
                    isClean());
            find_ = null;
          }
          return findBuilder_;
        }

        private MysqlxCrud.Insert insert_;
        private com.google.protobuf.SingleFieldBuilderV3<
            MysqlxCrud.Insert, MysqlxCrud.Insert.Builder, MysqlxCrud.InsertOrBuilder> insertBuilder_;
        /**
         * <code>optional .Mysqlx.Crud.Insert insert = 3;</code>
         * @return Whether the insert field is set.
         */
        public boolean hasInsert() {
          return ((bitField0_ & 0x00000004) != 0);
        }
        /**
         * <code>optional .Mysqlx.Crud.Insert insert = 3;</code>
         * @return The insert.
         */
        public MysqlxCrud.Insert getInsert() {
          if (insertBuilder_ == null) {
            return insert_ == null ? MysqlxCrud.Insert.getDefaultInstance() : insert_;
          } else {
            return insertBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .Mysqlx.Crud.Insert insert = 3;</code>
         */
        public Builder setInsert(MysqlxCrud.Insert value) {
          if (insertBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            insert_ = value;
            onChanged();
          } else {
            insertBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000004;
          return this;
        }
        /**
         * <code>optional .Mysqlx.Crud.Insert insert = 3;</code>
         */
        public Builder setInsert(
            MysqlxCrud.Insert.Builder builderForValue) {
          if (insertBuilder_ == null) {
            insert_ = builderForValue.build();
            onChanged();
          } else {
            insertBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000004;
          return this;
        }
        /**
         * <code>optional .Mysqlx.Crud.Insert insert = 3;</code>
         */
        public Builder mergeInsert(MysqlxCrud.Insert value) {
          if (insertBuilder_ == null) {
            if (((bitField0_ & 0x00000004) != 0) &&
                insert_ != null &&
                insert_ != MysqlxCrud.Insert.getDefaultInstance()) {
              insert_ =
                MysqlxCrud.Insert.newBuilder(insert_).mergeFrom(value).buildPartial();
            } else {
              insert_ = value;
            }
            onChanged();
          } else {
            insertBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000004;
          return this;
        }
        /**
         * <code>optional .Mysqlx.Crud.Insert insert = 3;</code>
         */
        public Builder clearInsert() {
          if (insertBuilder_ == null) {
            insert_ = null;
            onChanged();
          } else {
            insertBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000004);
          return this;
        }
        /**
         * <code>optional .Mysqlx.Crud.Insert insert = 3;</code>
         */
        public MysqlxCrud.Insert.Builder getInsertBuilder() {
          bitField0_ |= 0x00000004;
          onChanged();
          return getInsertFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .Mysqlx.Crud.Insert insert = 3;</code>
         */
        public MysqlxCrud.InsertOrBuilder getInsertOrBuilder() {
          if (insertBuilder_ != null) {
            return insertBuilder_.getMessageOrBuilder();
          } else {
            return insert_ == null ?
                MysqlxCrud.Insert.getDefaultInstance() : insert_;
          }
        }
        /**
         * <code>optional .Mysqlx.Crud.Insert insert = 3;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            MysqlxCrud.Insert, MysqlxCrud.Insert.Builder, MysqlxCrud.InsertOrBuilder>
            getInsertFieldBuilder() {
          if (insertBuilder_ == null) {
            insertBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                MysqlxCrud.Insert, MysqlxCrud.Insert.Builder, MysqlxCrud.InsertOrBuilder>(
                    getInsert(),
                    getParentForChildren(),
                    isClean());
            insert_ = null;
          }
          return insertBuilder_;
        }

        private MysqlxCrud.Update update_;
        private com.google.protobuf.SingleFieldBuilderV3<
            MysqlxCrud.Update, MysqlxCrud.Update.Builder, MysqlxCrud.UpdateOrBuilder> updateBuilder_;
        /**
         * <code>optional .Mysqlx.Crud.Update update = 4;</code>
         * @return Whether the update field is set.
         */
        public boolean hasUpdate() {
          return ((bitField0_ & 0x00000008) != 0);
        }
        /**
         * <code>optional .Mysqlx.Crud.Update update = 4;</code>
         * @return The update.
         */
        public MysqlxCrud.Update getUpdate() {
          if (updateBuilder_ == null) {
            return update_ == null ? MysqlxCrud.Update.getDefaultInstance() : update_;
          } else {
            return updateBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .Mysqlx.Crud.Update update = 4;</code>
         */
        public Builder setUpdate(MysqlxCrud.Update value) {
          if (updateBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            update_ = value;
            onChanged();
          } else {
            updateBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000008;
          return this;
        }
        /**
         * <code>optional .Mysqlx.Crud.Update update = 4;</code>
         */
        public Builder setUpdate(
            MysqlxCrud.Update.Builder builderForValue) {
          if (updateBuilder_ == null) {
            update_ = builderForValue.build();
            onChanged();
          } else {
            updateBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000008;
          return this;
        }
        /**
         * <code>optional .Mysqlx.Crud.Update update = 4;</code>
         */
        public Builder mergeUpdate(MysqlxCrud.Update value) {
          if (updateBuilder_ == null) {
            if (((bitField0_ & 0x00000008) != 0) &&
                update_ != null &&
                update_ != MysqlxCrud.Update.getDefaultInstance()) {
              update_ =
                MysqlxCrud.Update.newBuilder(update_).mergeFrom(value).buildPartial();
            } else {
              update_ = value;
            }
            onChanged();
          } else {
            updateBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000008;
          return this;
        }
        /**
         * <code>optional .Mysqlx.Crud.Update update = 4;</code>
         */
        public Builder clearUpdate() {
          if (updateBuilder_ == null) {
            update_ = null;
            onChanged();
          } else {
            updateBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000008);
          return this;
        }
        /**
         * <code>optional .Mysqlx.Crud.Update update = 4;</code>
         */
        public MysqlxCrud.Update.Builder getUpdateBuilder() {
          bitField0_ |= 0x00000008;
          onChanged();
          return getUpdateFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .Mysqlx.Crud.Update update = 4;</code>
         */
        public MysqlxCrud.UpdateOrBuilder getUpdateOrBuilder() {
          if (updateBuilder_ != null) {
            return updateBuilder_.getMessageOrBuilder();
          } else {
            return update_ == null ?
                MysqlxCrud.Update.getDefaultInstance() : update_;
          }
        }
        /**
         * <code>optional .Mysqlx.Crud.Update update = 4;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            MysqlxCrud.Update, MysqlxCrud.Update.Builder, MysqlxCrud.UpdateOrBuilder>
            getUpdateFieldBuilder() {
          if (updateBuilder_ == null) {
            updateBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                MysqlxCrud.Update, MysqlxCrud.Update.Builder, MysqlxCrud.UpdateOrBuilder>(
                    getUpdate(),
                    getParentForChildren(),
                    isClean());
            update_ = null;
          }
          return updateBuilder_;
        }

        private MysqlxCrud.Delete delete_;
        private com.google.protobuf.SingleFieldBuilderV3<
            MysqlxCrud.Delete, MysqlxCrud.Delete.Builder, MysqlxCrud.DeleteOrBuilder> deleteBuilder_;
        /**
         * <code>optional .Mysqlx.Crud.Delete delete = 5;</code>
         * @return Whether the delete field is set.
         */
        public boolean hasDelete() {
          return ((bitField0_ & 0x00000010) != 0);
        }
        /**
         * <code>optional .Mysqlx.Crud.Delete delete = 5;</code>
         * @return The delete.
         */
        public MysqlxCrud.Delete getDelete() {
          if (deleteBuilder_ == null) {
            return delete_ == null ? MysqlxCrud.Delete.getDefaultInstance() : delete_;
          } else {
            return deleteBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .Mysqlx.Crud.Delete delete = 5;</code>
         */
        public Builder setDelete(MysqlxCrud.Delete value) {
          if (deleteBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            delete_ = value;
            onChanged();
          } else {
            deleteBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000010;
          return this;
        }
        /**
         * <code>optional .Mysqlx.Crud.Delete delete = 5;</code>
         */
        public Builder setDelete(
            MysqlxCrud.Delete.Builder builderForValue) {
          if (deleteBuilder_ == null) {
            delete_ = builderForValue.build();
            onChanged();
          } else {
            deleteBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000010;
          return this;
        }
        /**
         * <code>optional .Mysqlx.Crud.Delete delete = 5;</code>
         */
        public Builder mergeDelete(MysqlxCrud.Delete value) {
          if (deleteBuilder_ == null) {
            if (((bitField0_ & 0x00000010) != 0) &&
                delete_ != null &&
                delete_ != MysqlxCrud.Delete.getDefaultInstance()) {
              delete_ =
                MysqlxCrud.Delete.newBuilder(delete_).mergeFrom(value).buildPartial();
            } else {
              delete_ = value;
            }
            onChanged();
          } else {
            deleteBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000010;
          return this;
        }
        /**
         * <code>optional .Mysqlx.Crud.Delete delete = 5;</code>
         */
        public Builder clearDelete() {
          if (deleteBuilder_ == null) {
            delete_ = null;
            onChanged();
          } else {
            deleteBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000010);
          return this;
        }
        /**
         * <code>optional .Mysqlx.Crud.Delete delete = 5;</code>
         */
        public MysqlxCrud.Delete.Builder getDeleteBuilder() {
          bitField0_ |= 0x00000010;
          onChanged();
          return getDeleteFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .Mysqlx.Crud.Delete delete = 5;</code>
         */
        public MysqlxCrud.DeleteOrBuilder getDeleteOrBuilder() {
          if (deleteBuilder_ != null) {
            return deleteBuilder_.getMessageOrBuilder();
          } else {
            return delete_ == null ?
                MysqlxCrud.Delete.getDefaultInstance() : delete_;
          }
        }
        /**
         * <code>optional .Mysqlx.Crud.Delete delete = 5;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            MysqlxCrud.Delete, MysqlxCrud.Delete.Builder, MysqlxCrud.DeleteOrBuilder>
            getDeleteFieldBuilder() {
          if (deleteBuilder_ == null) {
            deleteBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                MysqlxCrud.Delete, MysqlxCrud.Delete.Builder, MysqlxCrud.DeleteOrBuilder>(
                    getDelete(),
                    getParentForChildren(),
                    isClean());
            delete_ = null;
          }
          return deleteBuilder_;
        }

        private MysqlxSql.StmtExecute stmtExecute_;
        private com.google.protobuf.SingleFieldBuilderV3<
            MysqlxSql.StmtExecute, MysqlxSql.StmtExecute.Builder, MysqlxSql.StmtExecuteOrBuilder> stmtExecuteBuilder_;
        /**
         * <code>optional .Mysqlx.Sql.StmtExecute stmt_execute = 6;</code>
         * @return Whether the stmtExecute field is set.
         */
        public boolean hasStmtExecute() {
          return ((bitField0_ & 0x00000020) != 0);
        }
        /**
         * <code>optional .Mysqlx.Sql.StmtExecute stmt_execute = 6;</code>
         * @return The stmtExecute.
         */
        public MysqlxSql.StmtExecute getStmtExecute() {
          if (stmtExecuteBuilder_ == null) {
            return stmtExecute_ == null ? MysqlxSql.StmtExecute.getDefaultInstance() : stmtExecute_;
          } else {
            return stmtExecuteBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .Mysqlx.Sql.StmtExecute stmt_execute = 6;</code>
         */
        public Builder setStmtExecute(MysqlxSql.StmtExecute value) {
          if (stmtExecuteBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            stmtExecute_ = value;
            onChanged();
          } else {
            stmtExecuteBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000020;
          return this;
        }
        /**
         * <code>optional .Mysqlx.Sql.StmtExecute stmt_execute = 6;</code>
         */
        public Builder setStmtExecute(
            MysqlxSql.StmtExecute.Builder builderForValue) {
          if (stmtExecuteBuilder_ == null) {
            stmtExecute_ = builderForValue.build();
            onChanged();
          } else {
            stmtExecuteBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000020;
          return this;
        }
        /**
         * <code>optional .Mysqlx.Sql.StmtExecute stmt_execute = 6;</code>
         */
        public Builder mergeStmtExecute(MysqlxSql.StmtExecute value) {
          if (stmtExecuteBuilder_ == null) {
            if (((bitField0_ & 0x00000020) != 0) &&
                stmtExecute_ != null &&
                stmtExecute_ != MysqlxSql.StmtExecute.getDefaultInstance()) {
              stmtExecute_ =
                MysqlxSql.StmtExecute.newBuilder(stmtExecute_).mergeFrom(value).buildPartial();
            } else {
              stmtExecute_ = value;
            }
            onChanged();
          } else {
            stmtExecuteBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000020;
          return this;
        }
        /**
         * <code>optional .Mysqlx.Sql.StmtExecute stmt_execute = 6;</code>
         */
        public Builder clearStmtExecute() {
          if (stmtExecuteBuilder_ == null) {
            stmtExecute_ = null;
            onChanged();
          } else {
            stmtExecuteBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000020);
          return this;
        }
        /**
         * <code>optional .Mysqlx.Sql.StmtExecute stmt_execute = 6;</code>
         */
        public MysqlxSql.StmtExecute.Builder getStmtExecuteBuilder() {
          bitField0_ |= 0x00000020;
          onChanged();
          return getStmtExecuteFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .Mysqlx.Sql.StmtExecute stmt_execute = 6;</code>
         */
        public MysqlxSql.StmtExecuteOrBuilder getStmtExecuteOrBuilder() {
          if (stmtExecuteBuilder_ != null) {
            return stmtExecuteBuilder_.getMessageOrBuilder();
          } else {
            return stmtExecute_ == null ?
                MysqlxSql.StmtExecute.getDefaultInstance() : stmtExecute_;
          }
        }
        /**
         * <code>optional .Mysqlx.Sql.StmtExecute stmt_execute = 6;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            MysqlxSql.StmtExecute, MysqlxSql.StmtExecute.Builder, MysqlxSql.StmtExecuteOrBuilder>
            getStmtExecuteFieldBuilder() {
          if (stmtExecuteBuilder_ == null) {
            stmtExecuteBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                MysqlxSql.StmtExecute, MysqlxSql.StmtExecute.Builder, MysqlxSql.StmtExecuteOrBuilder>(
                    getStmtExecute(),
                    getParentForChildren(),
                    isClean());
            stmtExecute_ = null;
          }
          return stmtExecuteBuilder_;
        }
        @Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:Mysqlx.Prepare.Prepare.OneOfMessage)
      }

      // @@protoc_insertion_point(class_scope:Mysqlx.Prepare.Prepare.OneOfMessage)
      private static final OneOfMessage DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new OneOfMessage();
      }

      public static OneOfMessage getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      @Deprecated public static final com.google.protobuf.Parser<OneOfMessage>
          PARSER = new com.google.protobuf.AbstractParser<OneOfMessage>() {
        @Override
        public OneOfMessage parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new OneOfMessage(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<OneOfMessage> parser() {
        return PARSER;
      }

      @Override
      public com.google.protobuf.Parser<OneOfMessage> getParserForType() {
        return PARSER;
      }

      @Override
      public OneOfMessage getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int bitField0_;
    public static final int STMT_ID_FIELD_NUMBER = 1;
    private int stmtId_;
    /**
     * <pre>
     ** client side assigned statement id, which is going to identify
     *the result of preparation 
     * </pre>
     *
     * <code>required uint32 stmt_id = 1;</code>
     * @return Whether the stmtId field is set.
     */
    public boolean hasStmtId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     ** client side assigned statement id, which is going to identify
     *the result of preparation 
     * </pre>
     *
     * <code>required uint32 stmt_id = 1;</code>
     * @return The stmtId.
     */
    public int getStmtId() {
      return stmtId_;
    }

    public static final int STMT_FIELD_NUMBER = 2;
    private OneOfMessage stmt_;
    /**
     * <pre>
     ** defines one of following messages to be prepared:
     *Crud::Find, Crud::Insert, Crud::Delete, Crud::Upsert, Sql::StmtExecute 
     * </pre>
     *
     * <code>required .Mysqlx.Prepare.Prepare.OneOfMessage stmt = 2;</code>
     * @return Whether the stmt field is set.
     */
    public boolean hasStmt() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     ** defines one of following messages to be prepared:
     *Crud::Find, Crud::Insert, Crud::Delete, Crud::Upsert, Sql::StmtExecute 
     * </pre>
     *
     * <code>required .Mysqlx.Prepare.Prepare.OneOfMessage stmt = 2;</code>
     * @return The stmt.
     */
    public OneOfMessage getStmt() {
      return stmt_ == null ? OneOfMessage.getDefaultInstance() : stmt_;
    }
    /**
     * <pre>
     ** defines one of following messages to be prepared:
     *Crud::Find, Crud::Insert, Crud::Delete, Crud::Upsert, Sql::StmtExecute 
     * </pre>
     *
     * <code>required .Mysqlx.Prepare.Prepare.OneOfMessage stmt = 2;</code>
     */
    public OneOfMessageOrBuilder getStmtOrBuilder() {
      return stmt_ == null ? OneOfMessage.getDefaultInstance() : stmt_;
    }

    private byte memoizedIsInitialized = -1;
    @Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasStmtId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasStmt()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getStmt().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeUInt32(1, stmtId_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeMessage(2, getStmt());
      }
      unknownFields.writeTo(output);
    }

    @Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, stmtId_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getStmt());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof Prepare)) {
        return super.equals(obj);
      }
      Prepare other = (Prepare) obj;

      if (hasStmtId() != other.hasStmtId()) return false;
      if (hasStmtId()) {
        if (getStmtId()
            != other.getStmtId()) return false;
      }
      if (hasStmt() != other.hasStmt()) return false;
      if (hasStmt()) {
        if (!getStmt()
            .equals(other.getStmt())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasStmtId()) {
        hash = (37 * hash) + STMT_ID_FIELD_NUMBER;
        hash = (53 * hash) + getStmtId();
      }
      if (hasStmt()) {
        hash = (37 * hash) + STMT_FIELD_NUMBER;
        hash = (53 * hash) + getStmt().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static Prepare parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Prepare parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Prepare parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Prepare parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Prepare parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Prepare parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Prepare parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static Prepare parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static Prepare parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static Prepare parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static Prepare parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static Prepare parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(Prepare prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     **
     *Prepare a new statement
     *&#64;startuml
     *client -&gt; server: Prepare
     *alt Success
     *client &lt;- server: Ok
     *else Failure
     *client &lt;- server: Error
     *end
     *&#64;enduml
     *&#64;returns &#64;ref Mysqlx::Ok or &#64;ref Mysqlx::Error
     * </pre>
     *
     * Protobuf type {@code Mysqlx.Prepare.Prepare}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Mysqlx.Prepare.Prepare)
        PrepareOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return MysqlxPrepare.internal_static_Mysqlx_Prepare_Prepare_descriptor;
      }

      @Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return MysqlxPrepare.internal_static_Mysqlx_Prepare_Prepare_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                Prepare.class, Builder.class);
      }

      // Construct using com.mysql.cj.x.protobuf.MysqlxPrepare.Prepare.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getStmtFieldBuilder();
        }
      }
      @Override
      public Builder clear() {
        super.clear();
        stmtId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        if (stmtBuilder_ == null) {
          stmt_ = null;
        } else {
          stmtBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      @Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return MysqlxPrepare.internal_static_Mysqlx_Prepare_Prepare_descriptor;
      }

      @Override
      public Prepare getDefaultInstanceForType() {
        return Prepare.getDefaultInstance();
      }

      @Override
      public Prepare build() {
        Prepare result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @Override
      public Prepare buildPartial() {
        Prepare result = new Prepare(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.stmtId_ = stmtId_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          if (stmtBuilder_ == null) {
            result.stmt_ = stmt_;
          } else {
            result.stmt_ = stmtBuilder_.build();
          }
          to_bitField0_ |= 0x00000002;
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @Override
      public Builder clone() {
        return super.clone();
      }
      @Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.setField(field, value);
      }
      @Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.addRepeatedField(field, value);
      }
      @Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof Prepare) {
          return mergeFrom((Prepare)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(Prepare other) {
        if (other == Prepare.getDefaultInstance()) return this;
        if (other.hasStmtId()) {
          setStmtId(other.getStmtId());
        }
        if (other.hasStmt()) {
          mergeStmt(other.getStmt());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @Override
      public final boolean isInitialized() {
        if (!hasStmtId()) {
          return false;
        }
        if (!hasStmt()) {
          return false;
        }
        if (!getStmt().isInitialized()) {
          return false;
        }
        return true;
      }

      @Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Prepare parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (Prepare) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int stmtId_ ;
      /**
       * <pre>
       ** client side assigned statement id, which is going to identify
       *the result of preparation 
       * </pre>
       *
       * <code>required uint32 stmt_id = 1;</code>
       * @return Whether the stmtId field is set.
       */
      public boolean hasStmtId() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       ** client side assigned statement id, which is going to identify
       *the result of preparation 
       * </pre>
       *
       * <code>required uint32 stmt_id = 1;</code>
       * @return The stmtId.
       */
      public int getStmtId() {
        return stmtId_;
      }
      /**
       * <pre>
       ** client side assigned statement id, which is going to identify
       *the result of preparation 
       * </pre>
       *
       * <code>required uint32 stmt_id = 1;</code>
       * @param value The stmtId to set.
       * @return This builder for chaining.
       */
      public Builder setStmtId(int value) {
        bitField0_ |= 0x00000001;
        stmtId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       ** client side assigned statement id, which is going to identify
       *the result of preparation 
       * </pre>
       *
       * <code>required uint32 stmt_id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearStmtId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        stmtId_ = 0;
        onChanged();
        return this;
      }

      private OneOfMessage stmt_;
      private com.google.protobuf.SingleFieldBuilderV3<
          OneOfMessage, OneOfMessage.Builder, OneOfMessageOrBuilder> stmtBuilder_;
      /**
       * <pre>
       ** defines one of following messages to be prepared:
       *Crud::Find, Crud::Insert, Crud::Delete, Crud::Upsert, Sql::StmtExecute 
       * </pre>
       *
       * <code>required .Mysqlx.Prepare.Prepare.OneOfMessage stmt = 2;</code>
       * @return Whether the stmt field is set.
       */
      public boolean hasStmt() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       ** defines one of following messages to be prepared:
       *Crud::Find, Crud::Insert, Crud::Delete, Crud::Upsert, Sql::StmtExecute 
       * </pre>
       *
       * <code>required .Mysqlx.Prepare.Prepare.OneOfMessage stmt = 2;</code>
       * @return The stmt.
       */
      public OneOfMessage getStmt() {
        if (stmtBuilder_ == null) {
          return stmt_ == null ? OneOfMessage.getDefaultInstance() : stmt_;
        } else {
          return stmtBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       ** defines one of following messages to be prepared:
       *Crud::Find, Crud::Insert, Crud::Delete, Crud::Upsert, Sql::StmtExecute 
       * </pre>
       *
       * <code>required .Mysqlx.Prepare.Prepare.OneOfMessage stmt = 2;</code>
       */
      public Builder setStmt(OneOfMessage value) {
        if (stmtBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          stmt_ = value;
          onChanged();
        } else {
          stmtBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <pre>
       ** defines one of following messages to be prepared:
       *Crud::Find, Crud::Insert, Crud::Delete, Crud::Upsert, Sql::StmtExecute 
       * </pre>
       *
       * <code>required .Mysqlx.Prepare.Prepare.OneOfMessage stmt = 2;</code>
       */
      public Builder setStmt(
          OneOfMessage.Builder builderForValue) {
        if (stmtBuilder_ == null) {
          stmt_ = builderForValue.build();
          onChanged();
        } else {
          stmtBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <pre>
       ** defines one of following messages to be prepared:
       *Crud::Find, Crud::Insert, Crud::Delete, Crud::Upsert, Sql::StmtExecute 
       * </pre>
       *
       * <code>required .Mysqlx.Prepare.Prepare.OneOfMessage stmt = 2;</code>
       */
      public Builder mergeStmt(OneOfMessage value) {
        if (stmtBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0) &&
              stmt_ != null &&
              stmt_ != OneOfMessage.getDefaultInstance()) {
            stmt_ =
              OneOfMessage.newBuilder(stmt_).mergeFrom(value).buildPartial();
          } else {
            stmt_ = value;
          }
          onChanged();
        } else {
          stmtBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <pre>
       ** defines one of following messages to be prepared:
       *Crud::Find, Crud::Insert, Crud::Delete, Crud::Upsert, Sql::StmtExecute 
       * </pre>
       *
       * <code>required .Mysqlx.Prepare.Prepare.OneOfMessage stmt = 2;</code>
       */
      public Builder clearStmt() {
        if (stmtBuilder_ == null) {
          stmt_ = null;
          onChanged();
        } else {
          stmtBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <pre>
       ** defines one of following messages to be prepared:
       *Crud::Find, Crud::Insert, Crud::Delete, Crud::Upsert, Sql::StmtExecute 
       * </pre>
       *
       * <code>required .Mysqlx.Prepare.Prepare.OneOfMessage stmt = 2;</code>
       */
      public OneOfMessage.Builder getStmtBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getStmtFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       ** defines one of following messages to be prepared:
       *Crud::Find, Crud::Insert, Crud::Delete, Crud::Upsert, Sql::StmtExecute 
       * </pre>
       *
       * <code>required .Mysqlx.Prepare.Prepare.OneOfMessage stmt = 2;</code>
       */
      public OneOfMessageOrBuilder getStmtOrBuilder() {
        if (stmtBuilder_ != null) {
          return stmtBuilder_.getMessageOrBuilder();
        } else {
          return stmt_ == null ?
              OneOfMessage.getDefaultInstance() : stmt_;
        }
      }
      /**
       * <pre>
       ** defines one of following messages to be prepared:
       *Crud::Find, Crud::Insert, Crud::Delete, Crud::Upsert, Sql::StmtExecute 
       * </pre>
       *
       * <code>required .Mysqlx.Prepare.Prepare.OneOfMessage stmt = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          OneOfMessage, OneOfMessage.Builder, OneOfMessageOrBuilder>
          getStmtFieldBuilder() {
        if (stmtBuilder_ == null) {
          stmtBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              OneOfMessage, OneOfMessage.Builder, OneOfMessageOrBuilder>(
                  getStmt(),
                  getParentForChildren(),
                  isClean());
          stmt_ = null;
        }
        return stmtBuilder_;
      }
      @Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:Mysqlx.Prepare.Prepare)
    }

    // @@protoc_insertion_point(class_scope:Mysqlx.Prepare.Prepare)
    private static final Prepare DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new Prepare();
    }

    public static Prepare getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @Deprecated public static final com.google.protobuf.Parser<Prepare>
        PARSER = new com.google.protobuf.AbstractParser<Prepare>() {
      @Override
      public Prepare parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Prepare(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Prepare> parser() {
      return PARSER;
    }

    @Override
    public com.google.protobuf.Parser<Prepare> getParserForType() {
      return PARSER;
    }

    @Override
    public Prepare getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ExecuteOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Mysqlx.Prepare.Execute)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     ** client side assigned statement id, must be already prepared 
     * </pre>
     *
     * <code>required uint32 stmt_id = 1;</code>
     * @return Whether the stmtId field is set.
     */
    boolean hasStmtId();
    /**
     * <pre>
     ** client side assigned statement id, must be already prepared 
     * </pre>
     *
     * <code>required uint32 stmt_id = 1;</code>
     * @return The stmtId.
     */
    int getStmtId();

    /**
     * <pre>
     ** Arguments to bind to the prepared statement 
     * </pre>
     *
     * <code>repeated .Mysqlx.Datatypes.Any args = 2;</code>
     */
    java.util.List<MysqlxDatatypes.Any>
        getArgsList();
    /**
     * <pre>
     ** Arguments to bind to the prepared statement 
     * </pre>
     *
     * <code>repeated .Mysqlx.Datatypes.Any args = 2;</code>
     */
    MysqlxDatatypes.Any getArgs(int index);
    /**
     * <pre>
     ** Arguments to bind to the prepared statement 
     * </pre>
     *
     * <code>repeated .Mysqlx.Datatypes.Any args = 2;</code>
     */
    int getArgsCount();
    /**
     * <pre>
     ** Arguments to bind to the prepared statement 
     * </pre>
     *
     * <code>repeated .Mysqlx.Datatypes.Any args = 2;</code>
     */
    java.util.List<? extends MysqlxDatatypes.AnyOrBuilder>
        getArgsOrBuilderList();
    /**
     * <pre>
     ** Arguments to bind to the prepared statement 
     * </pre>
     *
     * <code>repeated .Mysqlx.Datatypes.Any args = 2;</code>
     */
    MysqlxDatatypes.AnyOrBuilder getArgsOrBuilder(
        int index);

    /**
     * <pre>
     ** send only type information for
     *&#64;ref Mysqlx::Resultset::ColumnMetaData, skipping names and others 
     * </pre>
     *
     * <code>optional bool compact_metadata = 3 [default = false];</code>
     * @return Whether the compactMetadata field is set.
     */
    boolean hasCompactMetadata();
    /**
     * <pre>
     ** send only type information for
     *&#64;ref Mysqlx::Resultset::ColumnMetaData, skipping names and others 
     * </pre>
     *
     * <code>optional bool compact_metadata = 3 [default = false];</code>
     * @return The compactMetadata.
     */
    boolean getCompactMetadata();
  }
  /**
   * <pre>
   **
   *Execute already prepared statement
   *&#64;startuml
   *client -&gt; server: Execute
   *alt Success
   *... Resultsets...
   *client &lt;- server: StmtExecuteOk
   *else Failure
   *client &lt;- server: Error
   *end
   *&#64;enduml
   *&#64;returns &#64;ref Mysqlx::Ok
   * </pre>
   *
   * Protobuf type {@code Mysqlx.Prepare.Execute}
   */
  public  static final class Execute extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:Mysqlx.Prepare.Execute)
      ExecuteOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Execute.newBuilder() to construct.
    private Execute(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Execute() {
      args_ = java.util.Collections.emptyList();
    }

    @Override
    @SuppressWarnings({"unused"})
    protected Object newInstance(
        UnusedPrivateParameter unused) {
      return new Execute();
    }

    @Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Execute(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              bitField0_ |= 0x00000001;
              stmtId_ = input.readUInt32();
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                args_ = new java.util.ArrayList<MysqlxDatatypes.Any>();
                mutable_bitField0_ |= 0x00000002;
              }
              args_.add(
                  input.readMessage(MysqlxDatatypes.Any.PARSER, extensionRegistry));
              break;
            }
            case 24: {
              bitField0_ |= 0x00000002;
              compactMetadata_ = input.readBool();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          args_ = java.util.Collections.unmodifiableList(args_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return MysqlxPrepare.internal_static_Mysqlx_Prepare_Execute_descriptor;
    }

    @Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return MysqlxPrepare.internal_static_Mysqlx_Prepare_Execute_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              Execute.class, Builder.class);
    }

    private int bitField0_;
    public static final int STMT_ID_FIELD_NUMBER = 1;
    private int stmtId_;
    /**
     * <pre>
     ** client side assigned statement id, must be already prepared 
     * </pre>
     *
     * <code>required uint32 stmt_id = 1;</code>
     * @return Whether the stmtId field is set.
     */
    public boolean hasStmtId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     ** client side assigned statement id, must be already prepared 
     * </pre>
     *
     * <code>required uint32 stmt_id = 1;</code>
     * @return The stmtId.
     */
    public int getStmtId() {
      return stmtId_;
    }

    public static final int ARGS_FIELD_NUMBER = 2;
    private java.util.List<MysqlxDatatypes.Any> args_;
    /**
     * <pre>
     ** Arguments to bind to the prepared statement 
     * </pre>
     *
     * <code>repeated .Mysqlx.Datatypes.Any args = 2;</code>
     */
    public java.util.List<MysqlxDatatypes.Any> getArgsList() {
      return args_;
    }
    /**
     * <pre>
     ** Arguments to bind to the prepared statement 
     * </pre>
     *
     * <code>repeated .Mysqlx.Datatypes.Any args = 2;</code>
     */
    public java.util.List<? extends MysqlxDatatypes.AnyOrBuilder>
        getArgsOrBuilderList() {
      return args_;
    }
    /**
     * <pre>
     ** Arguments to bind to the prepared statement 
     * </pre>
     *
     * <code>repeated .Mysqlx.Datatypes.Any args = 2;</code>
     */
    public int getArgsCount() {
      return args_.size();
    }
    /**
     * <pre>
     ** Arguments to bind to the prepared statement 
     * </pre>
     *
     * <code>repeated .Mysqlx.Datatypes.Any args = 2;</code>
     */
    public MysqlxDatatypes.Any getArgs(int index) {
      return args_.get(index);
    }
    /**
     * <pre>
     ** Arguments to bind to the prepared statement 
     * </pre>
     *
     * <code>repeated .Mysqlx.Datatypes.Any args = 2;</code>
     */
    public MysqlxDatatypes.AnyOrBuilder getArgsOrBuilder(
        int index) {
      return args_.get(index);
    }

    public static final int COMPACT_METADATA_FIELD_NUMBER = 3;
    private boolean compactMetadata_;
    /**
     * <pre>
     ** send only type information for
     *&#64;ref Mysqlx::Resultset::ColumnMetaData, skipping names and others 
     * </pre>
     *
     * <code>optional bool compact_metadata = 3 [default = false];</code>
     * @return Whether the compactMetadata field is set.
     */
    public boolean hasCompactMetadata() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     ** send only type information for
     *&#64;ref Mysqlx::Resultset::ColumnMetaData, skipping names and others 
     * </pre>
     *
     * <code>optional bool compact_metadata = 3 [default = false];</code>
     * @return The compactMetadata.
     */
    public boolean getCompactMetadata() {
      return compactMetadata_;
    }

    private byte memoizedIsInitialized = -1;
    @Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasStmtId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getArgsCount(); i++) {
        if (!getArgs(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeUInt32(1, stmtId_);
      }
      for (int i = 0; i < args_.size(); i++) {
        output.writeMessage(2, args_.get(i));
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeBool(3, compactMetadata_);
      }
      unknownFields.writeTo(output);
    }

    @Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, stmtId_);
      }
      for (int i = 0; i < args_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, args_.get(i));
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, compactMetadata_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof Execute)) {
        return super.equals(obj);
      }
      Execute other = (Execute) obj;

      if (hasStmtId() != other.hasStmtId()) return false;
      if (hasStmtId()) {
        if (getStmtId()
            != other.getStmtId()) return false;
      }
      if (!getArgsList()
          .equals(other.getArgsList())) return false;
      if (hasCompactMetadata() != other.hasCompactMetadata()) return false;
      if (hasCompactMetadata()) {
        if (getCompactMetadata()
            != other.getCompactMetadata()) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasStmtId()) {
        hash = (37 * hash) + STMT_ID_FIELD_NUMBER;
        hash = (53 * hash) + getStmtId();
      }
      if (getArgsCount() > 0) {
        hash = (37 * hash) + ARGS_FIELD_NUMBER;
        hash = (53 * hash) + getArgsList().hashCode();
      }
      if (hasCompactMetadata()) {
        hash = (37 * hash) + COMPACT_METADATA_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getCompactMetadata());
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static Execute parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Execute parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Execute parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Execute parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Execute parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Execute parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Execute parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static Execute parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static Execute parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static Execute parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static Execute parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static Execute parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(Execute prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     **
     *Execute already prepared statement
     *&#64;startuml
     *client -&gt; server: Execute
     *alt Success
     *... Resultsets...
     *client &lt;- server: StmtExecuteOk
     *else Failure
     *client &lt;- server: Error
     *end
     *&#64;enduml
     *&#64;returns &#64;ref Mysqlx::Ok
     * </pre>
     *
     * Protobuf type {@code Mysqlx.Prepare.Execute}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Mysqlx.Prepare.Execute)
        ExecuteOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return MysqlxPrepare.internal_static_Mysqlx_Prepare_Execute_descriptor;
      }

      @Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return MysqlxPrepare.internal_static_Mysqlx_Prepare_Execute_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                Execute.class, Builder.class);
      }

      // Construct using com.mysql.cj.x.protobuf.MysqlxPrepare.Execute.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getArgsFieldBuilder();
        }
      }
      @Override
      public Builder clear() {
        super.clear();
        stmtId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        if (argsBuilder_ == null) {
          args_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          argsBuilder_.clear();
        }
        compactMetadata_ = false;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      @Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return MysqlxPrepare.internal_static_Mysqlx_Prepare_Execute_descriptor;
      }

      @Override
      public Execute getDefaultInstanceForType() {
        return Execute.getDefaultInstance();
      }

      @Override
      public Execute build() {
        Execute result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @Override
      public Execute buildPartial() {
        Execute result = new Execute(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.stmtId_ = stmtId_;
          to_bitField0_ |= 0x00000001;
        }
        if (argsBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            args_ = java.util.Collections.unmodifiableList(args_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.args_ = args_;
        } else {
          result.args_ = argsBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.compactMetadata_ = compactMetadata_;
          to_bitField0_ |= 0x00000002;
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @Override
      public Builder clone() {
        return super.clone();
      }
      @Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.setField(field, value);
      }
      @Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.addRepeatedField(field, value);
      }
      @Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof Execute) {
          return mergeFrom((Execute)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(Execute other) {
        if (other == Execute.getDefaultInstance()) return this;
        if (other.hasStmtId()) {
          setStmtId(other.getStmtId());
        }
        if (argsBuilder_ == null) {
          if (!other.args_.isEmpty()) {
            if (args_.isEmpty()) {
              args_ = other.args_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureArgsIsMutable();
              args_.addAll(other.args_);
            }
            onChanged();
          }
        } else {
          if (!other.args_.isEmpty()) {
            if (argsBuilder_.isEmpty()) {
              argsBuilder_.dispose();
              argsBuilder_ = null;
              args_ = other.args_;
              bitField0_ = (bitField0_ & ~0x00000002);
              argsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getArgsFieldBuilder() : null;
            } else {
              argsBuilder_.addAllMessages(other.args_);
            }
          }
        }
        if (other.hasCompactMetadata()) {
          setCompactMetadata(other.getCompactMetadata());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @Override
      public final boolean isInitialized() {
        if (!hasStmtId()) {
          return false;
        }
        for (int i = 0; i < getArgsCount(); i++) {
          if (!getArgs(i).isInitialized()) {
            return false;
          }
        }
        return true;
      }

      @Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Execute parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (Execute) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int stmtId_ ;
      /**
       * <pre>
       ** client side assigned statement id, must be already prepared 
       * </pre>
       *
       * <code>required uint32 stmt_id = 1;</code>
       * @return Whether the stmtId field is set.
       */
      public boolean hasStmtId() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       ** client side assigned statement id, must be already prepared 
       * </pre>
       *
       * <code>required uint32 stmt_id = 1;</code>
       * @return The stmtId.
       */
      public int getStmtId() {
        return stmtId_;
      }
      /**
       * <pre>
       ** client side assigned statement id, must be already prepared 
       * </pre>
       *
       * <code>required uint32 stmt_id = 1;</code>
       * @param value The stmtId to set.
       * @return This builder for chaining.
       */
      public Builder setStmtId(int value) {
        bitField0_ |= 0x00000001;
        stmtId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       ** client side assigned statement id, must be already prepared 
       * </pre>
       *
       * <code>required uint32 stmt_id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearStmtId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        stmtId_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<MysqlxDatatypes.Any> args_ =
        java.util.Collections.emptyList();
      private void ensureArgsIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          args_ = new java.util.ArrayList<MysqlxDatatypes.Any>(args_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          MysqlxDatatypes.Any, MysqlxDatatypes.Any.Builder, MysqlxDatatypes.AnyOrBuilder> argsBuilder_;

      /**
       * <pre>
       ** Arguments to bind to the prepared statement 
       * </pre>
       *
       * <code>repeated .Mysqlx.Datatypes.Any args = 2;</code>
       */
      public java.util.List<MysqlxDatatypes.Any> getArgsList() {
        if (argsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(args_);
        } else {
          return argsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       ** Arguments to bind to the prepared statement 
       * </pre>
       *
       * <code>repeated .Mysqlx.Datatypes.Any args = 2;</code>
       */
      public int getArgsCount() {
        if (argsBuilder_ == null) {
          return args_.size();
        } else {
          return argsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       ** Arguments to bind to the prepared statement 
       * </pre>
       *
       * <code>repeated .Mysqlx.Datatypes.Any args = 2;</code>
       */
      public MysqlxDatatypes.Any getArgs(int index) {
        if (argsBuilder_ == null) {
          return args_.get(index);
        } else {
          return argsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       ** Arguments to bind to the prepared statement 
       * </pre>
       *
       * <code>repeated .Mysqlx.Datatypes.Any args = 2;</code>
       */
      public Builder setArgs(
          int index, MysqlxDatatypes.Any value) {
        if (argsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArgsIsMutable();
          args_.set(index, value);
          onChanged();
        } else {
          argsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       ** Arguments to bind to the prepared statement 
       * </pre>
       *
       * <code>repeated .Mysqlx.Datatypes.Any args = 2;</code>
       */
      public Builder setArgs(
          int index, MysqlxDatatypes.Any.Builder builderForValue) {
        if (argsBuilder_ == null) {
          ensureArgsIsMutable();
          args_.set(index, builderForValue.build());
          onChanged();
        } else {
          argsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       ** Arguments to bind to the prepared statement 
       * </pre>
       *
       * <code>repeated .Mysqlx.Datatypes.Any args = 2;</code>
       */
      public Builder addArgs(MysqlxDatatypes.Any value) {
        if (argsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArgsIsMutable();
          args_.add(value);
          onChanged();
        } else {
          argsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       ** Arguments to bind to the prepared statement 
       * </pre>
       *
       * <code>repeated .Mysqlx.Datatypes.Any args = 2;</code>
       */
      public Builder addArgs(
          int index, MysqlxDatatypes.Any value) {
        if (argsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArgsIsMutable();
          args_.add(index, value);
          onChanged();
        } else {
          argsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       ** Arguments to bind to the prepared statement 
       * </pre>
       *
       * <code>repeated .Mysqlx.Datatypes.Any args = 2;</code>
       */
      public Builder addArgs(
          MysqlxDatatypes.Any.Builder builderForValue) {
        if (argsBuilder_ == null) {
          ensureArgsIsMutable();
          args_.add(builderForValue.build());
          onChanged();
        } else {
          argsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       ** Arguments to bind to the prepared statement 
       * </pre>
       *
       * <code>repeated .Mysqlx.Datatypes.Any args = 2;</code>
       */
      public Builder addArgs(
          int index, MysqlxDatatypes.Any.Builder builderForValue) {
        if (argsBuilder_ == null) {
          ensureArgsIsMutable();
          args_.add(index, builderForValue.build());
          onChanged();
        } else {
          argsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       ** Arguments to bind to the prepared statement 
       * </pre>
       *
       * <code>repeated .Mysqlx.Datatypes.Any args = 2;</code>
       */
      public Builder addAllArgs(
          Iterable<? extends MysqlxDatatypes.Any> values) {
        if (argsBuilder_ == null) {
          ensureArgsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, args_);
          onChanged();
        } else {
          argsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       ** Arguments to bind to the prepared statement 
       * </pre>
       *
       * <code>repeated .Mysqlx.Datatypes.Any args = 2;</code>
       */
      public Builder clearArgs() {
        if (argsBuilder_ == null) {
          args_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          argsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       ** Arguments to bind to the prepared statement 
       * </pre>
       *
       * <code>repeated .Mysqlx.Datatypes.Any args = 2;</code>
       */
      public Builder removeArgs(int index) {
        if (argsBuilder_ == null) {
          ensureArgsIsMutable();
          args_.remove(index);
          onChanged();
        } else {
          argsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       ** Arguments to bind to the prepared statement 
       * </pre>
       *
       * <code>repeated .Mysqlx.Datatypes.Any args = 2;</code>
       */
      public MysqlxDatatypes.Any.Builder getArgsBuilder(
          int index) {
        return getArgsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       ** Arguments to bind to the prepared statement 
       * </pre>
       *
       * <code>repeated .Mysqlx.Datatypes.Any args = 2;</code>
       */
      public MysqlxDatatypes.AnyOrBuilder getArgsOrBuilder(
          int index) {
        if (argsBuilder_ == null) {
          return args_.get(index);  } else {
          return argsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       ** Arguments to bind to the prepared statement 
       * </pre>
       *
       * <code>repeated .Mysqlx.Datatypes.Any args = 2;</code>
       */
      public java.util.List<? extends MysqlxDatatypes.AnyOrBuilder>
           getArgsOrBuilderList() {
        if (argsBuilder_ != null) {
          return argsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(args_);
        }
      }
      /**
       * <pre>
       ** Arguments to bind to the prepared statement 
       * </pre>
       *
       * <code>repeated .Mysqlx.Datatypes.Any args = 2;</code>
       */
      public MysqlxDatatypes.Any.Builder addArgsBuilder() {
        return getArgsFieldBuilder().addBuilder(
            MysqlxDatatypes.Any.getDefaultInstance());
      }
      /**
       * <pre>
       ** Arguments to bind to the prepared statement 
       * </pre>
       *
       * <code>repeated .Mysqlx.Datatypes.Any args = 2;</code>
       */
      public MysqlxDatatypes.Any.Builder addArgsBuilder(
          int index) {
        return getArgsFieldBuilder().addBuilder(
            index, MysqlxDatatypes.Any.getDefaultInstance());
      }
      /**
       * <pre>
       ** Arguments to bind to the prepared statement 
       * </pre>
       *
       * <code>repeated .Mysqlx.Datatypes.Any args = 2;</code>
       */
      public java.util.List<MysqlxDatatypes.Any.Builder>
           getArgsBuilderList() {
        return getArgsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          MysqlxDatatypes.Any, MysqlxDatatypes.Any.Builder, MysqlxDatatypes.AnyOrBuilder>
          getArgsFieldBuilder() {
        if (argsBuilder_ == null) {
          argsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              MysqlxDatatypes.Any, MysqlxDatatypes.Any.Builder, MysqlxDatatypes.AnyOrBuilder>(
                  args_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          args_ = null;
        }
        return argsBuilder_;
      }

      private boolean compactMetadata_ ;
      /**
       * <pre>
       ** send only type information for
       *&#64;ref Mysqlx::Resultset::ColumnMetaData, skipping names and others 
       * </pre>
       *
       * <code>optional bool compact_metadata = 3 [default = false];</code>
       * @return Whether the compactMetadata field is set.
       */
      public boolean hasCompactMetadata() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       ** send only type information for
       *&#64;ref Mysqlx::Resultset::ColumnMetaData, skipping names and others 
       * </pre>
       *
       * <code>optional bool compact_metadata = 3 [default = false];</code>
       * @return The compactMetadata.
       */
      public boolean getCompactMetadata() {
        return compactMetadata_;
      }
      /**
       * <pre>
       ** send only type information for
       *&#64;ref Mysqlx::Resultset::ColumnMetaData, skipping names and others 
       * </pre>
       *
       * <code>optional bool compact_metadata = 3 [default = false];</code>
       * @param value The compactMetadata to set.
       * @return This builder for chaining.
       */
      public Builder setCompactMetadata(boolean value) {
        bitField0_ |= 0x00000004;
        compactMetadata_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       ** send only type information for
       *&#64;ref Mysqlx::Resultset::ColumnMetaData, skipping names and others 
       * </pre>
       *
       * <code>optional bool compact_metadata = 3 [default = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearCompactMetadata() {
        bitField0_ = (bitField0_ & ~0x00000004);
        compactMetadata_ = false;
        onChanged();
        return this;
      }
      @Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:Mysqlx.Prepare.Execute)
    }

    // @@protoc_insertion_point(class_scope:Mysqlx.Prepare.Execute)
    private static final Execute DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new Execute();
    }

    public static Execute getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @Deprecated public static final com.google.protobuf.Parser<Execute>
        PARSER = new com.google.protobuf.AbstractParser<Execute>() {
      @Override
      public Execute parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Execute(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Execute> parser() {
      return PARSER;
    }

    @Override
    public com.google.protobuf.Parser<Execute> getParserForType() {
      return PARSER;
    }

    @Override
    public Execute getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface DeallocateOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Mysqlx.Prepare.Deallocate)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     ** client side assigned statement id, must be already prepared 
     * </pre>
     *
     * <code>required uint32 stmt_id = 1;</code>
     * @return Whether the stmtId field is set.
     */
    boolean hasStmtId();
    /**
     * <pre>
     ** client side assigned statement id, must be already prepared 
     * </pre>
     *
     * <code>required uint32 stmt_id = 1;</code>
     * @return The stmtId.
     */
    int getStmtId();
  }
  /**
   * <pre>
   **
   *Deallocate already prepared statement
   *&#64;startuml
   *client -&gt; server: Deallocate
   *alt Success
   *client &lt;- server: Ok
   *else Failure
   *client &lt;- server: Error
   *end
   *&#64;enduml
   *&#64;returns &#64;ref Mysqlx::Ok or &#64;ref Mysqlx::Error
   * </pre>
   *
   * Protobuf type {@code Mysqlx.Prepare.Deallocate}
   */
  public  static final class Deallocate extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:Mysqlx.Prepare.Deallocate)
      DeallocateOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Deallocate.newBuilder() to construct.
    private Deallocate(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Deallocate() {
    }

    @Override
    @SuppressWarnings({"unused"})
    protected Object newInstance(
        UnusedPrivateParameter unused) {
      return new Deallocate();
    }

    @Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Deallocate(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              bitField0_ |= 0x00000001;
              stmtId_ = input.readUInt32();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return MysqlxPrepare.internal_static_Mysqlx_Prepare_Deallocate_descriptor;
    }

    @Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return MysqlxPrepare.internal_static_Mysqlx_Prepare_Deallocate_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              Deallocate.class, Builder.class);
    }

    private int bitField0_;
    public static final int STMT_ID_FIELD_NUMBER = 1;
    private int stmtId_;
    /**
     * <pre>
     ** client side assigned statement id, must be already prepared 
     * </pre>
     *
     * <code>required uint32 stmt_id = 1;</code>
     * @return Whether the stmtId field is set.
     */
    public boolean hasStmtId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     ** client side assigned statement id, must be already prepared 
     * </pre>
     *
     * <code>required uint32 stmt_id = 1;</code>
     * @return The stmtId.
     */
    public int getStmtId() {
      return stmtId_;
    }

    private byte memoizedIsInitialized = -1;
    @Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasStmtId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeUInt32(1, stmtId_);
      }
      unknownFields.writeTo(output);
    }

    @Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, stmtId_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof Deallocate)) {
        return super.equals(obj);
      }
      Deallocate other = (Deallocate) obj;

      if (hasStmtId() != other.hasStmtId()) return false;
      if (hasStmtId()) {
        if (getStmtId()
            != other.getStmtId()) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasStmtId()) {
        hash = (37 * hash) + STMT_ID_FIELD_NUMBER;
        hash = (53 * hash) + getStmtId();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static Deallocate parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Deallocate parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Deallocate parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Deallocate parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Deallocate parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Deallocate parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Deallocate parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static Deallocate parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static Deallocate parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static Deallocate parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static Deallocate parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static Deallocate parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(Deallocate prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     **
     *Deallocate already prepared statement
     *&#64;startuml
     *client -&gt; server: Deallocate
     *alt Success
     *client &lt;- server: Ok
     *else Failure
     *client &lt;- server: Error
     *end
     *&#64;enduml
     *&#64;returns &#64;ref Mysqlx::Ok or &#64;ref Mysqlx::Error
     * </pre>
     *
     * Protobuf type {@code Mysqlx.Prepare.Deallocate}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Mysqlx.Prepare.Deallocate)
        DeallocateOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return MysqlxPrepare.internal_static_Mysqlx_Prepare_Deallocate_descriptor;
      }

      @Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return MysqlxPrepare.internal_static_Mysqlx_Prepare_Deallocate_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                Deallocate.class, Builder.class);
      }

      // Construct using com.mysql.cj.x.protobuf.MysqlxPrepare.Deallocate.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @Override
      public Builder clear() {
        super.clear();
        stmtId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      @Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return MysqlxPrepare.internal_static_Mysqlx_Prepare_Deallocate_descriptor;
      }

      @Override
      public Deallocate getDefaultInstanceForType() {
        return Deallocate.getDefaultInstance();
      }

      @Override
      public Deallocate build() {
        Deallocate result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @Override
      public Deallocate buildPartial() {
        Deallocate result = new Deallocate(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.stmtId_ = stmtId_;
          to_bitField0_ |= 0x00000001;
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @Override
      public Builder clone() {
        return super.clone();
      }
      @Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.setField(field, value);
      }
      @Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.addRepeatedField(field, value);
      }
      @Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof Deallocate) {
          return mergeFrom((Deallocate)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(Deallocate other) {
        if (other == Deallocate.getDefaultInstance()) return this;
        if (other.hasStmtId()) {
          setStmtId(other.getStmtId());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @Override
      public final boolean isInitialized() {
        if (!hasStmtId()) {
          return false;
        }
        return true;
      }

      @Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Deallocate parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (Deallocate) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int stmtId_ ;
      /**
       * <pre>
       ** client side assigned statement id, must be already prepared 
       * </pre>
       *
       * <code>required uint32 stmt_id = 1;</code>
       * @return Whether the stmtId field is set.
       */
      public boolean hasStmtId() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       ** client side assigned statement id, must be already prepared 
       * </pre>
       *
       * <code>required uint32 stmt_id = 1;</code>
       * @return The stmtId.
       */
      public int getStmtId() {
        return stmtId_;
      }
      /**
       * <pre>
       ** client side assigned statement id, must be already prepared 
       * </pre>
       *
       * <code>required uint32 stmt_id = 1;</code>
       * @param value The stmtId to set.
       * @return This builder for chaining.
       */
      public Builder setStmtId(int value) {
        bitField0_ |= 0x00000001;
        stmtId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       ** client side assigned statement id, must be already prepared 
       * </pre>
       *
       * <code>required uint32 stmt_id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearStmtId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        stmtId_ = 0;
        onChanged();
        return this;
      }
      @Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:Mysqlx.Prepare.Deallocate)
    }

    // @@protoc_insertion_point(class_scope:Mysqlx.Prepare.Deallocate)
    private static final Deallocate DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new Deallocate();
    }

    public static Deallocate getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @Deprecated public static final com.google.protobuf.Parser<Deallocate>
        PARSER = new com.google.protobuf.AbstractParser<Deallocate>() {
      @Override
      public Deallocate parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Deallocate(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Deallocate> parser() {
      return PARSER;
    }

    @Override
    public com.google.protobuf.Parser<Deallocate> getParserForType() {
      return PARSER;
    }

    @Override
    public Deallocate getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Mysqlx_Prepare_Prepare_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_Mysqlx_Prepare_Prepare_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Mysqlx_Prepare_Prepare_OneOfMessage_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_Mysqlx_Prepare_Prepare_OneOfMessage_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Mysqlx_Prepare_Execute_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_Mysqlx_Prepare_Execute_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Mysqlx_Prepare_Deallocate_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_Mysqlx_Prepare_Deallocate_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    String[] descriptorData = {
      "\n\024mysqlx_prepare.proto\022\016Mysqlx.Prepare\032\014" +
      "mysqlx.proto\032\020mysqlx_sql.proto\032\021mysqlx_c" +
      "rud.proto\032\026mysqlx_datatypes.proto\"\235\003\n\007Pr" +
      "epare\022\017\n\007stmt_id\030\001 \002(\r\0222\n\004stmt\030\002 \002(\0132$.M" +
      "ysqlx.Prepare.Prepare.OneOfMessage\032\306\002\n\014O" +
      "neOfMessage\0227\n\004type\030\001 \002(\0162).Mysqlx.Prepa" +
      "re.Prepare.OneOfMessage.Type\022\037\n\004find\030\002 \001" +
      "(\0132\021.Mysqlx.Crud.Find\022#\n\006insert\030\003 \001(\0132\023." +
      "Mysqlx.Crud.Insert\022#\n\006update\030\004 \001(\0132\023.Mys" +
      "qlx.Crud.Update\022#\n\006delete\030\005 \001(\0132\023.Mysqlx" +
      ".Crud.Delete\022-\n\014stmt_execute\030\006 \001(\0132\027.Mys" +
      "qlx.Sql.StmtExecute\">\n\004Type\022\010\n\004FIND\020\000\022\n\n" +
      "\006INSERT\020\001\022\n\n\006UPDATE\020\002\022\n\n\006DELETE\020\004\022\010\n\004STM" +
      "T\020\005:\004\210\3520(\"f\n\007Execute\022\017\n\007stmt_id\030\001 \002(\r\022#\n" +
      "\004args\030\002 \003(\0132\025.Mysqlx.Datatypes.Any\022\037\n\020co" +
      "mpact_metadata\030\003 \001(\010:\005false:\004\210\3520)\"#\n\nDea" +
      "llocate\022\017\n\007stmt_id\030\001 \002(\r:\004\210\3520*B\031\n\027com.my" +
      "sql.cj.x.protobuf"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          Mysqlx.getDescriptor(),
          MysqlxSql.getDescriptor(),
          MysqlxCrud.getDescriptor(),
          MysqlxDatatypes.getDescriptor(),
        });
    internal_static_Mysqlx_Prepare_Prepare_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_Mysqlx_Prepare_Prepare_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_Mysqlx_Prepare_Prepare_descriptor,
        new String[] { "StmtId", "Stmt", });
    internal_static_Mysqlx_Prepare_Prepare_OneOfMessage_descriptor =
      internal_static_Mysqlx_Prepare_Prepare_descriptor.getNestedTypes().get(0);
    internal_static_Mysqlx_Prepare_Prepare_OneOfMessage_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_Mysqlx_Prepare_Prepare_OneOfMessage_descriptor,
        new String[] { "Type", "Find", "Insert", "Update", "Delete", "StmtExecute", });
    internal_static_Mysqlx_Prepare_Execute_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_Mysqlx_Prepare_Execute_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_Mysqlx_Prepare_Execute_descriptor,
        new String[] { "StmtId", "Args", "CompactMetadata", });
    internal_static_Mysqlx_Prepare_Deallocate_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_Mysqlx_Prepare_Deallocate_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_Mysqlx_Prepare_Deallocate_descriptor,
        new String[] { "StmtId", });
    com.google.protobuf.ExtensionRegistry registry =
        com.google.protobuf.ExtensionRegistry.newInstance();
    registry.add(Mysqlx.clientMessageId);
    com.google.protobuf.Descriptors.FileDescriptor
        .internalUpdateFileDescriptor(descriptor, registry);
    Mysqlx.getDescriptor();
    MysqlxSql.getDescriptor();
    MysqlxCrud.getDescriptor();
    MysqlxDatatypes.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
